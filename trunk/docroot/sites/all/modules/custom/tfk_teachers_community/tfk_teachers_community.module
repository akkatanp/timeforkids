<?php
/**
 * @file
 * Code for the Teachers Community feature.
 */

include_once('tfk_teachers_community.features.inc');

/**
 * Implementation of hook_permission.
 */
function tfk_teachers_community_permission() {
  $perms = array(
    'edit question description' => array(
      'title' => t('Edit Teacher Community Question description'),
      'description' => t('Per Spec 17F.3 only the editorial team should add a description to the question.'),
      'restrict access' => TRUE,
    ),
  );
  return $perms;
}


/**
 * Implementation of hook_custom_theme.
 */
function tfk_teachers_community_custom_theme() {
  // Switch from the admin theme to tfk when adding a question.
  if(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'teacher-community-question') {
    return 'tfk';
  }
}

/**
 * Implementation of hook_block_info.
 */
function tfk_teachers_community_block_info() {
  $blocks = array();
  
  // TFK Photos and Video Node Featured Block (Sidebar).
  $blocks['tfk_teachers_comm_more_topics'] = array(
    'info' => t('TFK Teachers Community More Topics Block'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implementation of hook_block_view.
 */
function tfk_teachers_community_block_view($delta='') {
  $block = array();
  
  switch ($delta) {
    
    // TFK Photos and Video Node Featured Block (Sidebar).
    case 'tfk_teachers_comm_more_topics':
      $topics = tfk_teachers_community_get_teacher_topics();
      $topics['type'] = 'ul';
      $topics['title'] = 'MORE TOPICS FROM TEACHERS';
      if($topics != FALSE) {
        $block['content'] = theme('item_list', $topics);
        $block['content'] .= l('View All the Topics from Teachers', 'node');
      }
    break;
    
  }
  
  return $block;
}

/**
 * Override or insert variables into the page templates.
 *
 * @param $variables
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("page" in this case.)
 */
function tfk_teachers_community_preprocess_page(&$variables, $hook) {
  $community_question = FALSE;
  
  // Node add/edit page, Spec 17F.
  if(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'teacher-community-question') {
    $community_question = TRUE;

    //$page['before_content'] = t('<h2>Submit to the Teachers Community</h2>');
    drupal_set_title(t('Submit to the Teachers Community'));
    
    // Hardcode help message. The one coming from the Drupal interface contains bad markup (>.<)!
    $variables['page']['help']['system_help']['#markup'] = t("
			<h2>Got a Question? Need Advice on Lesson Plans?</h2>
			<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    ");
    
    $btn_id = "form#teacher-community-question-node-form div#edit-actions input#edit-submit";
    $btn_img = "/images/submit-your-question-active.png";
  }
  
  // Node view page, Spec 17B.
  if(array_key_exists('node', $variables) && $variables['node']->type == 'teacher_community_question') {
    $community_question = TRUE;
    
    $variables['top_suggestion_msg'] = t('GOT A QUESTION? GOT A LESSON PLAN IDEA?');
    $variables['top_suggestion_link'] = l(t('Submit to the TFK Teacher Community'), 'node/add/teacher-community-question');
    
    $btn_id = "div.node-teacher-community-question.view-mode-full form#comment-form div#edit-actions input#edit-submit";
    $btn_img = "/images/submit-your-response-active.png";
  }
  
  // Common actions.
  if($community_question) {
    // Section title.
    $variables['section_title'] = t('TEACHER COMMUNITY');
    
    $module_path = drupal_get_path('module', 'tfk_teachers_community');
    
    // Add CSS.
    drupal_add_css($module_path. '/css/tfk_teachers_community.css', 'file');
    
    // Animate buttons with Safari support.
    drupal_add_js($module_path. '/js/tfk_teachers_community.js', 'file');
    
    // We dynamically pass to the animation script the CSS selector.
    drupal_add_js(array('tfk_teachers_community' => array('btn_id' => $btn_id, 'btn_img' => '/'. $module_path. $btn_img)), 'setting');
    
    // Unset Editor's Menu.
    $page = & $variables['page'];
    unset($page['editor_menu']);
  }
}

/**
 * Preprocess node.
 */
function tfk_teachers_community_preprocess_node(&$variables, $hook) {

  // Node view page, Spec 17B.
  if(array_key_exists('node', $variables) && $variables['node']->type == 'teacher_community_question') {
    $_variables = & $variables;
    
    $variables['print_title'] = TRUE;
    
    $variables['question_date'] = date('F j, Y');
    
    unset($_variables['content']['links']);
  }
  
}

/**
 * Preprocess comment wrapper.
 */
function tfk_teachers_community_preprocess_comment_wrapper(&$variables, $hook) {
  if(arg(0) == 'node' && $variables['node']->type == 'teacher_community_question') {
    $variables['comments_header_title'] = t('TEACHERS RESPONSES');
    $variables['new_comment_label'] = t('ADD YOUR RESPONSE TO THE DISCUSSION');
    $variables['bottom_suggestion_msg'] = t('GOT A QUESTION? NEED ADVICE ON LESSON PLANS?<br /> HAVE A GREAT IDEA FOR A WORKSHEET?<br /> SHARE IT WITH THE TFK TEACHER COMMUNITY!');
    $variables['bottom_suggestion_link'] = l(t('Submit Your Thoughts to the TFK Community'), 'node/add/teacher-community-question');
  }
}

/**
 * Preprocess comment.
 */
function tfk_teachers_community_preprocess_comment(&$variables, $hook) {
  if($variables['node']->type == 'teacher_community_question' && arg(0) == 'node') {
    $_variables = & $variables;
    
    // Comments have no title in Spec 17B.
    unset($_variables['title']);
    
    // Add CSS classes.
    $variables['classes'][] = 'teacher_community_question';
    
    // Link to comment author's profile.
    $variables['author_profile_link'] = l('See Bio', 'user/'. $variables['comment']->uid);
    
    // Change submitted date format.
    $variables['submitted'] = date('n/j/Y', $variables['comment']->changed);
    
    // Supress links for non-editorial/admin users.
    $auth_roles = array('administrator', 'editor');
    $supress_links = TRUE;
    foreach($auth_roles as $auth_role) {
      // If current user is the auth list, show him the links.
      if(array_search($auth_role, $variables['user']->roles) !== FALSE) {
        $supress_links = FALSE;
      }
    }
    if($supress_links) {
      unset($_variables['content']['links']);
    }
  
    // Unset variables we are not going to use.
    unset($_variables['permalink']);
    unset($_variables['status']);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter.
 *
 * Core form for adding Teacher Community Question nodes.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 * @param string $form_id
 *   A keyed array containing the current state of the form.
 */
function tfk_teachers_community_form_teacher_community_question_node_form_alter(&$form, &$form_state, $form_id) {
  
  // Cleanup extraneous fields.
  $form['menu']['#access'] = FALSE;
  $form['locations']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;
  $form['path']['#access'] = FALSE;
  $form['comment_settings']['#access'] = FALSE;
  $form['author']['#access'] = FALSE;
  $form['options']['#access'] = FALSE;
  
  // Change the default Core title textfield to a texarea.
  $form['title']['#type'] = 'textarea';
  $form['title']['#maxlength'] = 500;
  $form['title']['#rows'] = 9;
  $form['title']['#resizable'] = FALSE;
  $form['title']['#description'] = 'The maximum number of characters allowed is 500.';
  
  // Hide description (body) field if user does not have the permissions to edit it.
  if(!user_access('edit question description')) {
    $form['body']['#access'] = FALSE;
  }
  
  $actions = & $form['actions'];
  unset($actions['preview']);
  
  // Using regular input element.
  // $form['actions']['submit']['#value'] = '';
  
  // Using image input element for Safari support.
  // Only alter submit button when adding a new node.
  if(arg(2) != 'edit') {
    unset($actions['submit']['#value']);
    $form['actions']['submit']['#type'] = 'image_button';
    $path = drupal_get_path('module', 'tfk_teachers_community');
    $form['actions']['submit']['#src'] = $path. '/images/submit-your-question.png';
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter.
 *
 * Core form for adding Teacher Community Question comments.
 * The form id is "comment_node_teacher_community_question_form".
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function tfk_teachers_community_form_comment_node_teacher_community_question_form_alter(&$form, &$form_state, $form_id) {

  $_form = & $form;
  
  // We need the author for the admin interface, so we leave that in.
  $form['author']['#access'] = FALSE;
  
  // But we don't need the subject, so we can get rid of it.
  unset($_form['subject']);
  
  // Unset other stuff.
  unset($_form['actions']['preview']);
  unset($_form['comment_body']['und'][0]['#title']);
  
  // Using regular input element.
  // $form['actions']['submit']['#value'] = t('Submit Your Response');
  
  // Using image input element for Safari support.
  unset($_form['actions']['submit']['#value']);
  $form['actions']['submit']['#type'] = 'image_button';
  $path = drupal_get_path('module', 'tfk_teachers_community');
  $form['actions']['submit']['#src'] = $path. '/images/submit-your-response.png';
  
  // Call our custom validation function after already existing ones.
  $form['#validate'][] = 'tfk_teachers_community_validate_comments';
}

/**
 * Custom validation function for comments.
 *
 * Avoids redirecting users to another page when a blank comment is submitted,
 * which is Core's behavior. This is called after comment_form_validate().
 *
 * @see tfk_teachers_community_form_comment_node_teacher_community_question_form_alter()
 */
function tfk_teachers_community_validate_comments(&$form, &$form_state) {
  $comment_copy = $form_state['values']['comment_body'];
  $comment_body = array_shift(array_shift($comment_copy));
  if(empty($comment_body['value'])) {
    form_set_error('comment_body', 'The comment field cannot be empty.');
    $form_state['redirect'] = 'node/'. $form_state['build_info']['args'][0]->nid;
    drupal_redirect_form($form_state);
  }
}


// *** CUSTOM CODE *** ///


function tfk_teachers_community_get_teacher_topics() {
  $items = array('items');
  
  $view = views_get_view('teacher_community_more_topics');
  #$view->set_display('block');
  if(is_null($view)) {
    return FALSE;
  } else {
    $view->execute();
  	if(!empty($view->result)) {
	    foreach($view->result as $result) {
	      $items['items'][] = array(
	        l($result->node_title, 'node/'. $result->nid),
	      );
	    }
  		return $items;
  	} else {
  	  return FALSE;
  	}
  }
}
