<?php
/**
 * Path to user page
 * @var string
 */
define('TFK_USER_PROFILE_USER_PATH', 'user');

/**
 * Implementation of form_alter().
 */
function tfk_user_profile_form_user_login_alter( &$form, $form_state){
	$form['#validate'] = array(  'user_login_name_validate','user_login_authenticate_validate', 'tfk_user_profile_login_validate', 'tfk_user_login_final_validate' );
   	$form['#action'] = '/user';
  	$form['name']['#title'] = 'Email';
}

function tfk_user_profile_user_login(&$edit, $account) {
  if(isset($account->field_grade_level['und'][0]['tid'])){
  	$GLOBALS['destination'] =  $_SERVER["HTTP_REFERER"];
    drupal_goto($_SERVER["HTTP_REFERER"]);
   }
}
/**
 * Implementation of hook_user_load.
 */
function tfk_user_profile_user_load($users, $test = NULL) {
  // Load the grade level into the global user object.
  foreach($users as $user) {
    $grade_tid = field_get_items('user', $user, 'field_grade_level');
    if($grade_tid) {
      $user->grade_level = taxonomy_term_load($grade_tid[0]['tid']);
    }
  }
}

/** Use a custom final validate function to redirect or show
 *  a custom error message when the user fails to validate
 *  or authenticate via LUCIE
 */
function tfk_user_login_final_validate($form, &$form_state) {
	if (empty($form_state['uid'])) {
		// Always register an IP-based failed login event.
		flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
		// Register a per-user failed login event.
		if (isset($form_state['flood_control_user_identifier'])) {
	  		flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
		}
		
		if (isset($form_state['lucie_error'])) {
			if ($form_state['lucie_error'] == 'user_locked') {
				form_set_error('name', t('Your account has been locked.  A new temporary password has been sent to your email.'));
				watchdog('user', 'Account Locked: Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
			} else {
				form_set_error('name', t('Your subscription to TIME For Kids has expired.  Please visit <a href="@url">timeforkids.com/customerservice</a> to renew your subscription.'), array('@url' => url('customerservice')));
				watchdog('user', 'Subcscription expired: Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
			}
		} elseif (isset($form_state['flood_control_triggered'])) {
			if ($form_state['flood_control_triggered'] == 'user') {
				form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('customerservice'))));
	  		} else {
				// We did not find a uid, so the limit is IP-based.
				form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('customerservice'))));
	  		}
		} else {
	  		form_set_error('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('customerservice'))));
	  		watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
		}
	} elseif (isset($form_state['flood_control_user_identifier'])) {
		// Clear past failures for this user so as not to block a user who might
		// log in and out more than once in an hour.
		flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
	}
}
/**
 * Check to see if this user has a record in the users_lucie_account table.
 */
function tfk_check_lucie_user($lucieData){
	$result = db_query("SELECT aiid, lid, uid, username FROM {users_lucie_account} WHERE lid = :lid", array(':lid' => $lucieData['uidpk']));
	while ($obj = $result->fetchObject()) {
		 return $obj;
	}
	return false;
}
/**
* Insert a row into the table: users_role
* for a new teacher that has logged in
*/
function tfk_insert_teacher_role($uid=0){
	$rid = db_query("SELECT rid FROM {role} WHERE name = :name", array(':name' => 'teacher'))->fetchField();
	if ($rid && $uid) {
		$fields = array('uid' => $uid, 'rid' => $rid);
		// delete any roles associated to this LUCIE user that are not 'teacher'
		db_delete('users_roles')->condition(db_and()
				->condition('uid', $uid)
				->condition('rid', $rid, '!=')
		)->execute();
		// make sure that this user has a 'teacher' role associated to it.
		db_merge('users_roles')->key(array('uid'=>$uid))->fields($fields)->updateFields($fields)->execute();
	}
}
/**
 * Insert a new row into the users_lucie_account table.
 * This is done for each new user that logs in through the lucie system.
 */
function tfk_insert_lucie_user($lucieData, $uid, $username){
	// insert a row into the lucie table
	$fields = array('lid' => $lucieData['uidpk'], 'uid' => $uid, 'username' => strtolower($lucieData['userId']));
	db_insert('users_lucie_account')->fields($fields)->execute();
	
	//update the users table to have the correct name and email
	$fields = array('mail' => strtolower($lucieData['userId']), 'name' => substr($lucieData['firstName'], 0, 1).$lucieData['lastName'].$uid);
	db_update('users')->condition('uid', $uid)->fields($fields)->execute();
}
/**
 * This function will be called if a user's lucie account is updated.
 * This will keep all the email addresses, which are used for login, in sync.
 */
function tfk_update_lucie_login($lucieData, $existingUser) {
	//if the data is not the same update the appropriate tables
	if ($existingUser->username != strtolower($lucieData['userId'])) {
		//update the users_lucie_account table
		$fields = array('username' =>  strtolower($lucieData['userId']));
		db_update('users_lucie_account')->condition('aiid', $existingUser->aiid)->fields($fields)->execute();
		//update the autmap table
		$fields = array('authname' =>  strtolower($lucieData['userId']));
		db_update('authmap')->condition('authname', $existingUser->username)->fields($fields)->execute();
		//update the users table
		$fields = array('mail' => strtolower($lucieData['userId']));
		db_update('users')->condition('uid', $existingUser->uid)->fields($fields)->execute();
	}
}
/**
 * This function will allow users to login using the LUCIE system.
 * If this is the first time a user visits the site, an account will be created for them using
 * the information returned from the LUCIE system.
 * If this is an update, the email address for the account will be sync across the necessary tables.
 */
function tfk_user_profile_login_validate( $form, &$form_state ){
	$username = $form_state['values']['name'];
    $response = tfk_lucie_check_user($username, &$form_state);
    if (!empty($response))
    {
    	// check to see if a record exists in the lucie mapping table
 		$existingUser = tfk_check_lucie_user($response);
 		
 		if (empty($existingUser)) {
        	user_external_login_register( $username, 'project_authentication' );
        	$account = user_external_load($username);
        	// insert a record into the mapping table
        	tfk_insert_lucie_user($response, $account->uid, $username);
        	tfk_insert_teacher_role($account->uid);
        	$form_state['uid'] = $account->uid;
        } else {
			tfk_update_lucie_login($response, $existingUser);
		 	user_external_login_register( $response['userId'], 'project_authentication' );
        	$account = user_external_load($response['userId']);
        	tfk_insert_teacher_role($account->uid);
			$form_state['uid'] = $account->uid;
		}
    }
}
/**
 * This function will return the information for a user that has an account in the LUCIE system.
 * Information returned inclues, first & last name, account id, and email address.
 */
function tfk_lucie_get_user_info($email, $token){
 $url = 'http://cgi.timeinc.com/webservices/customers/'.check_plain($email).'/TK';
 $response = drupal_http_request($url, array('headers' => array('Content-Type'=>'application/json', 'CGI-token' => $token),
	'method'=> 'GET'
   ));
   if($response->code == 200){
   		$dataUser = drupal_json_decode($response->data);
   		return $dataUser;
   }
}
/**
 * This function will get the entitlements context for a user in LUCIE.
 * This will return whether or not a user is an active subscriber
 * and should have access to the content/site.
*/
function tfk_lucie_user_entitlements($token){
  $url = 'http://cgi.timeinc.com/webservices/entitlements?CGI-App-Id=com.timeinc.tk.web';
  $response = drupal_http_request($url, array('headers' => array('Content-Type'=>'application/json', 'CGI-token' => $token),
	'method'=> 'GET'
  ));
  // Decode the JSON data and pass to the call to get the user information
  $dataResponse = drupal_json_decode($response->data);
  
  if($response->code == 200){
  	return $dataResponse['issues'][0]['activeSubscription'];
  }
}
/**
 * This function will authenticate a user in the LUCIE system.
 * A token is returned which must be used in any additional calls to LUCIE.
 */
function tfk_lucie_check_user($email, &$form_state){
  $url = 'http://cgi.timeinc.com/webservices/customers/'.check_plain($email).'/TK/auth_token';
  $pass_arr = array('password'=>$form_state['values']['pass'], 'CGI-App-Id' => 'com.timeinc.tk.web', 'deviceid' => 'TK.WEB', 'deviceip' => ip_address());
  $pass = drupal_json_encode($pass_arr);
  
  $response = drupal_http_request($url,
          array('headers' => array('Content-Type'=>'application/json'),
              'method'=> 'POST',
              'data' => $pass,
              'CGI-App-Id' => 'com.timeinc.tk.web'
              ));
  // Decode the JSON data and pass to the call to get the user information
  $dataResponse = drupal_json_decode($response->data);
	
  // process the LUCIE login response.
  // some actions are based on the $response code, others $response_code + json parameter
  switch ($response->code) {
  	case 201:
  		if (tfk_lucie_user_entitlements($dataResponse['token'])) {
			return tfk_lucie_get_user_info($email, $dataResponse['token']);
		} else {
			$form_state['lucie_error'] = 'sub_expired';
  		}
  		break;
  	case 404:
  		if ($dataResponse['userLockedOut']) {
  			$form_state['lucie_error'] = 'user_locked';
  		}
  		break;
  }
  return false;
}
//Removes the tabbed menu for teachers and board members
function tfk_user_profile_menu_alter(&$items) {
    $items['user/%user/view']['type'] = MENU_CALLBACK;
    $items['user/%user/bookmarks']['type'] = MENU_CALLBACK;
    $items['user/%user/edit']['type'] = MENU_CALLBACK;
}
//User update form for teacher profiles
function tfk_user_profile_form($form, &$form_state, $user_profile) {
        $vid = 6; //vocabulary id for grade level
        $result = db_query('SELECT DISTINCT ti.tid,td.name from taxonomy_index ti left join taxonomy_term_data td on ti.tid = td.tid WHERE td.vid = :vid',array('vid'=>$vid));
        $grade_levels = array('0'=>'Please Select');
        foreach ($result as $record) {
            $grade_levels[$record->tid] = $record->name;
        }

        if(isset($user_profile)) {
            $form['uid'] = array(
                '#type' => 'value',
                '#value' => $user_profile['elements']['#account']->uid
             );
            $current_grade_level = $user_profile['elements']['#account']->field_grade_level['und']['0']['tid'];
        }

	$form['nickname'] = array(
		'#type' => 'textfield',
		'#title' => t('Nickname'),
		'#required' => TRUE,
                '#description' => '(Nickname can be 6-18 characters long)',
                '#default_value' => isset($user_profile) ? $user_profile['elements']['#account']->field_nickname['und']['0']['value'] : ''
	);
	
	$form['grade_level'] = array(
		'#type' => 'select',
		'#title' => t('Choose your Grade Level'),
		'#options' => $grade_levels,
                '#default_value' => isset($user_profile) ? $current_grade_level : ''
	);



        global $user;
        if (in_array("editor", $user->roles)) {
            $form['password'] = array(
                  '#type' => 'password',
                  '#title' => t('New Password'),
                  '#required' => FALSE,
            );

            $form['password_confirm'] = array(
                  '#type' => 'password',
                  '#title' => t('Confirm Password'),
                  '#required' => FALSE,
            );

        }

	$form['save'] = array(
		'#type' => 'submit',
		'#value' => t('Save Your Settings'),
	);
	
	return $form;
}
//form submission for teacher profile updates
function tfk_user_profile_form_submit($form, &$form_state) {
	global $user;

	if($form_state['values']['op'] == t('Save Your Settings')) {
		$updated_user_profile = new stdClass();
		$updated_user_profile->nickname = $form_state['values']['nickname'];
		$updated_user_profile->grade_level = $form_state['values']['grade_level'];

                if(isset($form_state['values']['uid'])) {
                    $updated_user_profile->uid = $form_state['values']['uid'];

                    if(strlen($updated_user_profile->nickname) < 6 || strlen($updated_user_profile->nickname) > 18){
                      form_set_error('zz','Nickname can be 6-18 characters long');
                      return;
                    }else{
                       db_merge('field_data_field_nickname')
                      ->key(array(
                      'entity_id' => $updated_user_profile->uid,
                          'entity_type' => 'user',
                          'deleted' => 0,
                          'delta' => 0,
                          'language' => 'und'
                     ))->fields(array('field_nickname_value' => $updated_user_profile->nickname))->execute();
                    }


                    db_merge('field_data_field_grade_level')
                      ->key(array(
                      'entity_id' => $updated_user_profile->uid,
                          'entity_type' => 'user',
                          'deleted' => 0,
                          'delta' => 0,
                          'language' => 'und'
                     ))->fields(array('field_grade_level_tid' => $updated_user_profile->grade_level))->execute();

                    drupal_set_message(t('Account settings updated.'));
                    cache_clear_all($cid = 'field:user:'.$updated_user_profile->uid, $table = 'cache_field', $wildcard = FALSE);
 					
 					if (in_array("editor", $user->roles)) {
                      if(isset($form_state['values']['password']) && !empty($form_state['values']['password'])) {

                        if($form_state['values']['password'] != $form_state['values']['password_confirm']){
                          drupal_set_message('Please Provide Matching Passwords then submit again.');
                        }else{
                          require_once drupal_get_path() . 'includes/password.inc';
                          $hashpass = user_hash_password($form_state['values']['password']);
                          db_query('update {users} set pass= :pass where uid = :uid',array('pass'=>$hashpass,'uid'=> $user->uid));
                          drupal_set_message('Your password has been changed');
                        }
                      }
                    }
                    $current_user = user_load($user->uid);
                }
	}
}
//Outputs either board member or teacher settings page
function tfk_user_profile (&$user_profile) {
    global $user;
    if (isset($user_profile['elements']['#account']->field_is_board_member)) {
        if ($user_profile['elements']['#account']->field_is_board_member['und']['0']['value'] == "yes") {
            //Show board member page.
           drupal_set_title('Teacher Community');
           $output = t("<h2 class=\"tfk-user-profile-title\">Teacher Board Member &#8212; ".$user_profile['elements']['#account']->name."</h2><div id=\"tfk-user-profile-board-member-wrapper\">");
           $output .= $user_profile['elements']['user_picture']['#markup'];
           $output .= "<span class=\"tfk-user-profile-board-member-name\">".$user_profile['elements']['#account']->name."</span>";
           $output .= t("<p class=\"tfk-user-profile-board-member-taught\">".$user_profile['elements']['#account']->field_teacher_grade_taught['und']['0']['value']."</p>");
           $output .= t("<p class=\"tfk-user-profile-board-member-location\">".$user_profile['elements']['#account']->field_teacher_location['und']['0']['value']."</p>");
           $output .= t("<p class=\"tfk-user-profile-board-member-copy\">".$user_profile['elements']['#account']->field_profile_copy['und']['0']['value']."</p></div>");
        } elseif ($user->uid == $user_profile['elements']['#account']->uid) {
            //Only the user can edit it's his data.
            //Show user settings page
            drupal_set_title('My Account');
            $output = t("<h2 class=\"tfk-user-user-profile-title\">Account Settings</h2>".drupal_render(drupal_get_form('tfk_user_profile_form', $user_profile)));
        } else {
            //Default behavior
        }
    }
    return $output;
}


function tfk_user_profile_block_info() {
  $blocks = array();
  // Photos and Video title block.
  $blocks['tfk-profile-settings'] = array(
    'info' => t('TFK Profile Settings'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  

  return $blocks;
}


function tfk_user_profile_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'tfk-profile-settings':
      $block['subject'] = t('TFK Profile Settings');
      $block['content'] = _tfk_profile_settings();
    break;
  }
  return $block;
}


function _tfk_profile_settings(){
  return theme('tfk_profile_settings');
  //return '';
}

function tfk_user_profile_theme() {
  return array(
    'tfk_profile_settings' => array(
      'template' => 'tfk-profile-settings',
      'variables' => array('list' => NULL),
    )
  );
}