<?php

/**
 * Implementation of hook_menu.
 */
function tfk_search_menu(){
  $items = array();
  
  $items['photos-video'] = array(
  	'title' => 'Photos & Video',
  	'page callback' => 'tfk_search_photos_and_video',
  	'access callback' => 'user_access',
  	'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_init.
 */
function tfk_search_init(){
  //print_R(apachesolr_get_enabled_facets('CGKX-19447'));
  
  // Include our custom SolrBaseQuery class.
  module_load_include('inc', 'tfk_search', 'TimeIncSolrBaseQuery');
  
  // Provide default styling for Photos & Video section.
  if(arg(0) == 'photos-video') {
    drupal_add_css(drupal_get_path('module', 'tfk_search'). '/css/tfk_search.css', 'file');
  }
}


function tfk_search_apachesolr_update_index(&$document, $node) {
  if (isset($node->field_date)){

    $tmp_date =  field_get_items('node', $node, 'field_date');
    $date = $tmp_date[0]['value'];
    $date = date('Y', $date);
    $document->addField('sm_editorial_date_tfk', $date);
  }
}

function tfk_search_apachesolr_facets() {
  $facets['sm_editorial_date_tfk'] = array(
    'info' => t('Year of the Node'),
    'facet_field' => 'sm_editorial_date_tfk',
  );
  return $facets;
}

/**
 * Implementation of hook_block_info.
 */
function tfk_search_block_info() {
  $blocks = array();
  
  // Photos and Video title block.
  $blocks['tfk_search_photos_video_title'] = array(
    'info' => t('TFK Search Photos and Video title'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'photos-video',
    'region' => 'sidebar_first',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  // Custom facet blocks.
  $facets = tfk_search_apachesolr_facets();
  foreach ($facets as $delta => $facet){
    $blocks[$delta] = array_merge($facets[$delta], array('cache' => DRUPAL_CACHE_PER_PAGE));
  }
  return $blocks;
}

/**
 * Implementation of hook_block_view.
 */
function tfk_search_block_view($delta='') {
  $block = array();
  
  switch ($delta) {
    
    case 'sm_editorial_date_tfk':
      $block['subject'] = t('Custom ApacheSolrFilter');

      if (apachesolr_has_searched()) {
        $response = apachesolr_static_response_cache();
  
        if (empty($response)) {
          return;
        }
        $query = apachesolr_current_query();
        $block['content'] = apachesolr_facet_block($response, $query, 'tfk_search', $delta, $delta, t($facet['info']));
      }else{
        $block['content'] = '';
      }
    break;
    
    // Photos and Video title block.
    case 'tfk_search_photos_video_title':
      $block['subject'] = t('SEARCH PHOTOS & VIDEO');
      $block['content'] = '&nbsp;';
    break;
    
  }
  
  return $block;
}

function tfk_search_block_configure($delta='') {
  if($delta == 'sm_editorial_date_tfk'){
      return apachesolr_facetcount_form('sm_editorial_date_tfk', $delta);
  }
}


function tfk_search_block_save($delta = '', $edit = array()){
  if($delta == 'solr_filter_year'){
     apachesolr_facetcount_save($edit);
  }
  return;
}

/**
 * Block preprocessor.
 *
 * @param array $vars
 */
function tfk_search_preprocess_block(&$vars) {
  // Specific template suggestion for current search block photos-video.
  if(arg(0) == 'photos-video') {
    $vars['theme_hook_suggestions'] = array_merge(
      array('block__apachesolr_search__currentsearch__tfk_search__photos_video', 'block__apachesolr_search__currentsearch__tfk_search'),
      $vars['theme_hook_suggestions']
    );
  }
}

/**
 * Preprocess current search text.
 *
 * @param array $vars
 */
function tfk_search_preprocess_apachesolr_currentsearch(&$vars) {
  //@todo Change default text.
}

/**
 * Preprocess the result set.
 *
 * @param array $vars
 */
function tfk_search_preprocess_search_results(&$vars) {
 
  // Specific template suggestions for all the results on photos and video.
  if(arg(0) == 'photos-video') {
    $vars['theme_hook_suggestions'] = array_merge(
      array('search_results__tfk_search__photos_video', 'search_results__tfk_search'),
      $vars['theme_hook_suggestions']
    );
  }
}

/**
 * Preprocess individual search results.
 *
 * @param array $vars
 */
function tfk_search_preprocess_search_result(&$vars) {
    $vars['tfk_search_cont_type'] = $vars['result']['fields']['bundle_name'];
   
    // Add specific template suggestions for invividual results on photos and video.
    // Shuffle the order of the suggestions to prioritize the use of our template on top of the default.
    // The first template to be found is implemented.
    // @link http://api.drupal.org/api/drupal/includes--theme.inc/function/theme.
    if(arg(0) == 'photos-video') {
      $vars['theme_hook_suggestions'] = array_merge(
        array('search_result__tfk_search__photos_video', 'search_result__tfk_search'),
        $vars['theme_hook_suggestions']
      );
    }
    
    switch ($vars['result']['fields']['bundle']) {
      
      case 'minisite':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);

        if(isset($node->field_minisite_tout_image)){
          $tmp_img_nid =  field_get_items('node', $node, 'field_minisite_tout_image');
          $uri = $tmp_img_nid[0]['uri'];
          $newpath = image_style_path('square_thumbnail',$uri);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
      break;
      
      case 'atw_destination':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);
  
        if(isset($node->field_tout_image)){
          $tmp_img_nid =  field_get_items('node', $node, 'field_tout_image');
          $img_nid = $tmp_img_nid[0]['nid'];
  
          $result = db_query('select fi.field_image_fid,fm.filename from {field_data_field_image} fi
            left join {file_managed} fm on fi.field_image_fid = fm.fid
            where fi.entity_type = :bundle_type and fi.entity_id = :img_nid',array('bundle_type'=>'node','img_nid'=>$img_nid));
          $record = $result->fetch();
          $img_filename = file_build_uri(basename($record->filename));
  
          $newpath = image_style_path('square_thumbnail',$img_filename);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
      break;
      
      case 'video':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);
        if(isset($node->field_video_thumbnail)){
          $tmp_img_nid =  field_get_items('node', $node, 'field_video_thumbnail');
          $uri = $tmp_img_nid[0]['uri'];
          $newpath = image_style_path('square_thumbnail',$uri);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
      break;
      
      case 'worksheet':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);
        if(isset($node->field_worksheet_thumbnail_image)){
          $tmp_img_nid =  field_get_items('node', $node, 'field_worksheet_thumbnail_image');
          $uri = $tmp_img_nid[0]['uri'];
          $newpath = image_style_path('square_thumbnail',$uri);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
        if(isset($node->field_grade_level)){
          $tmp_tid = field_get_items('node', $node, 'field_grade_level');
          $tid = $tmp_tid[0]['tid'];
          $name_res =  db_query('select name from taxonomy_term_data where tid = :tid',array('tid' => $tid ));
          $name = $name_res->fetch();
          $name = $name->name;
          $vars['tfk_search_res_grade_level'] = $name;
        }
      break;

      case 'slideshow':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);
        if(isset($node->field_slideshow_images)) {
          $tmp_img_nid =  field_get_items('node', $node, 'field_slideshow_images');
          $img_nid = $tmp_img_nid[0]['nid'];
          $result = db_query('select fi.field_image_fid,fm.filename from {field_data_field_image} fi
            left join {file_managed} fm on fi.field_image_fid = fm.fid
            where fi.entity_type = :bundle_type and fi.entity_id = :img_nid',array('bundle_type'=>'node','img_nid'=>$img_nid));
          $record = $result->fetch();
          $img_filename = file_build_uri(basename($record->filename));
          $newpath = image_style_path('square_thumbnail',$img_filename);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
      break;
      
      case 'article':
        $nid = $vars['result']['fields']['entity_id'];
        $node = node_load($nid);
        if(isset($node->field_tout_image)){
          $tmp_img_nid =  field_get_items('node', $node, 'field_tout_image');
          $img_nid = $tmp_img_nid[0]['nid'];
  
          $result = db_query('select fi.field_image_fid,fm.filename from {field_data_field_image} fi
            left join {file_managed} fm on fi.field_image_fid = fm.fid
            where fi.entity_type = :bundle_type and fi.entity_id = :img_nid',array('bundle_type'=>'node','img_nid'=>$img_nid));
          $record = $result->fetch();
          $img_filename = file_build_uri(basename($record->filename));
  
          $newpath = image_style_path('square_thumbnail',$img_filename);
          $abspath = file_create_url($newpath);
          $vars['tfk_search_res_image'] = $abspath;
        }
        if(isset($node->field_article_category)){
          $tmp_tid = field_get_items('node', $node, 'field_article_category');
          $tid = $tmp_tid[0]['tid'];
          $name_res =  db_query('select name from taxonomy_term_data where tid = :tid',array('tid' => $tid ));
          $name = $name_res->fetch();
          $name = $name->name;
          $vars['tfk_search_res_category'] = $name;
        }
      break;
      
      //default:
      //  ;
      //break;
    }

}

/**
 * Implementation of hook_theme_registry_alter
 *
 * Tell Drupal to look into our module for templates as well.
 */
/*function tfk_search_theme_registry_alter(&$theme_registry) {
  //$theme_registry['search_result']['theme paths'][] = drupal_get_path('module', 'tfk_search'). '/templates';
  //$theme_registry['search_result']['theme paths'][] = $theme_registry['search_result']['theme path'];
  //unset($theme_registry['search_result']['theme path']);
}*/


/**
 * Implementation of hook_apachesolr_modify_query().
 */
function tfk_search_apachesolr_modify_query($query, $caller) {
  // Limit the search results to image and video content type.
  // Only apply these filters when we are in the photos and video page.
  if($query->get_base_path() === 'photos-video') {
    $subquery = apachesolr_drupal_query();
    $subquery->add_filter('bundle', 'image');
    $subquery->add_filter('bundle', 'slideshow');
    $query->add_subquery($subquery, 'OR');
  }
  
  if($caller == 'apachesolr_search' && ($query->get_base_path() !== 'photos-video')) {
    global $user;
    if(count($user->roles) == 1 && $user->roles[1] == 'anonymous user'){
     $query->add_filter("bundle", 'worksheet',TRUE);
     $query->add_filter("bundle", 'mini_lesson',TRUE);
    }
  }
}

function tfk_search_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'search_form'){
    $form['basic']['keys']['#title'] = '';
  }
}

/**
 * Photos and Video menu callback.
 */
function tfk_search_photos_and_video() {

  module_load_include('module', 'search');
  
  $filterstring = isset($_GET['filters']) ? $_GET['filters'] : '';
  $solrsort = isset($_GET['solrsort']) ? $_GET['solrsort'] : '';
  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $base_path = 'photos-video';
  
  $response = apachesolr_search_run(search_get_keys(), $filterstring, $solrsort, $base_path, $page, 'apachesolr_search');
  
  return theme('search_results', array('results' => $response));
    
}

/**
 * Helper function for grabbing search keys.
 */
function search_get_keys() {
  static $return;
  if (!isset($return)) {
    // Extract keys as remainder of path
    // Note: support old GET format of searches for existing links.
    $path = explode('/', $_GET['q'], 2);
    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    $return = count($path) == 2 ? $path[1] : $keys;
  }
  return $return;
}
