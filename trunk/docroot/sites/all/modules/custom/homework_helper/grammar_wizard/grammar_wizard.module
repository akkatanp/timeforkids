<?php

/**
 * @file
 * A multistep form for interactive Grammar Wizard quizzes.
 */

/**
 * Implements hook_node_view().
 */
function grammar_wizard_node_view($node, $view_mode) {
  if ($node->type == 'grammar_practice' && $view_mode == 'full') {
    module_load_include('inc', 'grammar_wizard', 'grammar_wizard.pages');
    $questions = grammar_wizard_prepare_questions($node);
    $node->content['grammar_wizard'] = drupal_get_form('grammar_wizard_multistep_form', $questions);
  }
}

/**
 * A multistep form, where a different and sequential form
 * is presented on each step of the form.
 *
 * In the AJAX version, the form is replaced for each wizard section. In the
 * multistep version, it causes a new page load.
 *
 * @param $form
 * @param $form_state
 */
function grammar_wizard_multistep_form($form, &$form_state, $questions) {
  
  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 0 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;

  $last_step = count($questions) - 1;

  $form["step_$step"] = $questions[$step];
  if (isset($form["step_$step"]['question'])) {
    $form["step_$step"]['question']['#default_value'] = empty($form_state['values']["step_$step"]['question']) ? '' : $form_state['values']["step_$step"]['question'];
  }
  
  if ($step > 0) {
   $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t("Previous step"),

      // Since all info will be discarded, don't validate on 'prev'.
      '#limit_validation_errors' => array(),
      // #submit is required to use #limit_validation_errors
      '#submit' => array('grammar_wizard_multistep_form_submit'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'grammar_wizard_multistep_form_callback',
      ),
    );
  }
  if ($step < $last_step) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next step'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'grammar_wizard_multistep_form_callback',
      ),
    );
  }
  if ($step == $last_step - 1) {
    // Get default values from previous form entries.
    foreach ($form["step_$step"] as $key => $data) {
      if (is_numeric($key)) {
        foreach ($data as $field => $field_data) {
          if ($field == 'question') {
          $form["step_$step"][$key][$field]['#default_value'] = $form_state['storage']['values']["step_$key"][$field];
          }  
        }  
      }  
    }  
  }  
  if ($step == $last_step) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Save"),
    );
    $form['description'] = array(
      '#markup' => grammar_wizard_final_question_content($form_state),
      '#weight' => 0,
    );
  }
  return $form;
}

function grammar_wizard_multistep_form_callback($form, $form_state) {
  return $form;
}

/**
 * Submit function for grammar_wizard_multistep_form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function grammar_wizard_multistep_form_submit($form, &$form_state) {
  // Save away the current information.
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next step')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
  }
  if ($form_state['triggering_element']['#value'] == t('Previous step')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }
  if ($form_state['triggering_element']['#value'] == t('Save')) {
    
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Prepare final step content.
 */
function grammar_wizard_final_question_content($form_state) {
  return '';
}  



