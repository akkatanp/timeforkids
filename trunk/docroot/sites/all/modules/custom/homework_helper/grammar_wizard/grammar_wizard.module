<?php

/**
 * @file
 * A multistep form for interactive Grammar Wizard quizzes.
 */

/**
 * Implements hook_node_view().
 */
function grammar_wizard_node_view($node, $view_mode) {
  if ($node->type == 'grammar_practice' && $view_mode == 'full') {
    module_load_include('inc', 'grammar_wizard', 'grammar_wizard.pages');
    $questions = grammar_wizard_prepare_questions($node);
    $node->content['grammar_wizard'] = drupal_get_form('grammar_wizard_multistep_form', $questions);
  }
}

/**
 * A multistep form, where a different and sequential form
 * is presented on each step of the form.
 *
 * In the AJAX version, the form is replaced for each wizard section. In the
 * multistep version, it causes a new page load.
 *
 * @param $form
 * @param $form_state
 */
function grammar_wizard_multistep_form($form, &$form_state, $questions) {
  
  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 0 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;

  $last_step = count($questions) - 1;

  $form["step_$step"] = $questions[$step];
  if (isset($form["step_$step"]['question'])) {
    $form["step_$step"]['question']['#default_value'] = empty($form_state['values']["step_$step"]['question']) ? '' : $form_state['values']["step_$step"]['question'];
  }

  $form['view_rules'] = array(
    '#markup' => '<div id="grammar-wizard-see-rules"><h2>See The Rules Again</h2><p>You can read the rules, but you\'ll have to restart the quiz again.</p>' . l('View Rules', 'homework-helper/grammar-practice/rules/' . $form["step_$step"]['#parent_nid'], array('attributes' => array('class' => array('button')))) . '</div>',
    '#weight' => -2, 
  );

  if ($step == $last_step) {
    $form['description'] = array(
      '#markup' => grammar_wizard_final_question_content($form_state),
      '#weight' => 0,
    );
  } 
  else {
    $form['numbering'] = array(
      '#markup' => '<div id="grammar-wizard-numbering">' . ($step + 1) . ' of ' . (count($questions) - 1) . '</div>',  
      '#weight' => -1,
    );
    $form['check_answer'] = array(
      '#type' => 'submit',
      '#value' => t('Check Answer'),
      '#submit' => array('grammar_wizard_check_answer'),
      '#weight' => 10,
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'grammar_wizard_multistep_form_callback',
      ),
    );
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => $step == $last_step - 1 ? t('See my Results') : t('Next Question'),
      '#submit' => array('grammar_wizard_multistep_form_submit'),
      '#access' => isset($form_state['correct_answer']) ? TRUE : FALSE,
      '#weight' => 11,
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'grammar_wizard_multistep_form_callback',
      ),
    );
  }
    
  return $form;
}

function grammar_wizard_multistep_form_callback($form, &$form_state) {
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!isset($form_state['correct_answer'])) {
    //$form_state['storage']['step']++;
  }

  // Form needs to be rebuilt because it will possibly have different content.
  $form = drupal_rebuild_form('grammar_wizard_multistep_form', $form_state);
  if (isset($form_state['student_answers'][$current_step])) {
    if ($form_state['student_answers'][$current_step] == 1) {
      $form['check_answer']['#access'] = FALSE; 
      $form['question_result'] = array('#markup' => $form_state['question_result'], '#weight' => 1,);
    }  
    else {
      $form['question_result'] = array('#markup' => $form_state['question_result'], '#weight' => 1,);
    }

    if (isset($form_state['correct_answer']) && !$form_state['correct_answer']) {
      $form['check_answer']['#value'] = t('Try Again');
    }
    else {
      $form['check_answer']['#value'] = t('Check Answer');
    }
  }
  $form['next']['#access'] = isset($form_state['correct_answer']) ? TRUE : FALSE;
  unset($form_state['correct_answer']);

  return $form;
}

/**
 * Submit function for grammar_wizard_multistep_form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function grammar_wizard_multistep_form_submit($form, &$form_state) {
  // Save away the current information.
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next Question') || $form_state['triggering_element']['#value'] == t('See my Results')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
    unset($form_state['correct_answer']);
  }
  if ($form_state['triggering_element']['#value'] == t('Previous step')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }
  if ($form_state['triggering_element']['#value'] == t('Save')) {
    
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Prepare final step content.
 */
function grammar_wizard_final_question_content($form_state) {
  $correct = 0;
  $incorrect = 0;

  foreach($form_state['student_answers'] as $answer) {
    if ($answer == 1) {
      $correct++;
    }
    if ($answer == 0) {
      $incorrect++;
    }
  }  

  if ($incorrect == 0) {
    $output = views_embed_view('grammar_practice_trophies');
    $output .= '<div id="grammar-wizard-results"><h2>Your Results:</h2><div>Correct: ' . $correct . '</div><div>Incorrect: ' . $incorrect . '</div><h2>Congratulations!</h2></div>';
  }  
  else {
    $output .= '<div id="grammar-wizard-results"><h2>Your Results:</h2><div>Correct: ' . $correct . '</div><div>Incorrect: ' . $incorrect . '</div></div>';
  }  


  return $output;
}  


function grammar_wizard_check_answer($form, &$form_state) {
  $current_step = 'step_' . $form_state['storage']['step'];
  $correct_answer = $form[$current_step]['#correct_answer'];
  $selected_answer = $form_state['input'][$current_step]['question']; 
  
  if ($correct_answer == $selected_answer) {
    $form_state['correct_answer'] = TRUE;
    $form_state['question_result'] = '<div id="grammar-wizard-result"><h2>You Got It!</h2><div id="grammar-wizard-rule"><h2>You Understand:</h2>' . $form[$current_step]['#rule'] . '<h3>Example:</h3><div id="grammar-wizard-example">' . $form[$current_step]['#rule_example'] . '</div></div></div>';
    $form_state['student_answers'][$current_step] = 1;
  }  
  elseif (!isset($selected_answer)) {
    drupal_set_message('Please select an answer.', 'warning');
  }
  else {
    $form_state['correct_answer'] = FALSE;
    $form_state['question_result'] = '<div id="grammar-wizard-result"><h2>Try Again!</h2><div id="grammar-wizard-rule"><h2>Remember:</h2>' . $form[$current_step]['#rule'] . '<h3>Example:</h3><div id="grammar-wizard-example">' . $form[$current_step]['#rule_example'] . '</div></div></div>';
    $form_state['student_answers'][$current_step] = 0;
  }  
}  

