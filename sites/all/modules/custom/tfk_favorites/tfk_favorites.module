<?php

/**
 * Response sent from Drupal to JQuery to determine whether the call to
 * tfkfav/ajax/del was successful.
 *
 * @var string
 */
define("TFK_FAVS_AJAX_SUCCESS", "success");

function tfk_favorites_menu(){
  $items['tfkfav/ajax/del'] = array(
    'title' => 'Around The World',
    'page callback' => '_tfk_fav_del',
    'access callback' => 'user_access',
    'access arguments' => array('access content')
  );
  return $items;
}


function tfk_favorites_block_info() {
  $blocks['tfk-favorites-links'] = array(
    'info' => t('Favorites Block')
  );
  $blocks['tfk_favorites_links'] = array(
    'info' => t('Hookable Favorites Block')
  );
  return $blocks;
}


function tfk_favorites_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'tfk-favorites-links':
      $content = _tfk_favorites_links_block_content();
      if($content) {
        $block['subject'] = t('Favorites Block');
        $block['content'] = _tfk_favorites_links_block_content();
      }
      break;
    case 'tfk_favorites_links':
      $content = _tfk_favorites_links_block_content();
      if($content) {
        $block['content'] = _tfk_favorites_links_block_content();
      }
    break;
  }

  return $block;
}

/**
 * Creates the "My Favorites" block.
 *
 * Callback for tfk_favorites_block_view(), delta "tfk_favorites_links".
 *
 * @see tfk_favorites_block_view()
 */
function _tfk_favorites_links_block_content() {
  $path = arg(0);
  
  // The Favorites behavior causes havoc with Views, only add it on the search pages.
  if($path == TFK_SEARCH_PHOTOSVIDEO_PATH || $path == TFK_SEARCH_WORKSHEETS_PATH || $path == 'my-favorites') {
    
  	// Supressed role check here. This is only used in Worksheets, whose menu item should be already restricted.
  	//if(tfk_helper_user_has_role()) {
      
  	  // We add the CSS here so the block can be added to multiple pages with ease.
      drupal_add_css(drupal_get_path('module', 'tfk_favorites'). '/css/tfk_my_favorites_block.css');
  
      $favorites_module_path = drupal_get_path('module', 'tfk_favorites');
      $search_module_path = drupal_get_path('module', 'tfk_search');
      
      $referrer = $_SERVER['HTTP_REFERER'];
      $ref_tmp = explode('/', $referrer);
      $last_ref_segment = end($ref_tmp);

      // Add JS settings and file. These are used for the clear all favorites Javascript.
      drupal_add_js(array('tfk_favorites' => array('ajax_callback' => url('tfkfav/ajax/del'), 'ref' => $last_ref_segment,'path' => $path, 'success' => TFK_FAVS_AJAX_SUCCESS)), 'setting');
      drupal_add_js($favorites_module_path. '/js/tfk_favorites.js', 'file');

      // tfks421, supress My Favorites block when user has no favorites.
      if(!tfk_favorites_count_usrf()) {
        return FALSE;
      } else {
        // View all my favorites link.
        $link_options = array('html' => TRUE, 'attributes' => array('title' => 'View All My Favorites'));
        $view_all = l(theme('image', array('path' => $search_module_path. '/images/view-all-my-favorites.png', 'alt' => 'View All My Favorites', 'attributes' => array('title' => 'View All My Favorites'))), 'my-favorites', $link_options);
    
        // Clear favorites link.
        $link_options['attributes']['fragment'] = ' '; // Adds the # at the end of the link.
        $link_options['attributes'] = array('title' => 'Clear All Favorites', 'id' => 'delfavs');
        $clear_all = l(theme('image', array('path' => $search_module_path. '/images/clear-all-favorites.png', 'alt' => 'Clear All Favorites', 'attributes' => array('title' => 'Clear All Favorites'))), $path, $link_options);
        
        // Theme output.
        $variables = array('ref' => $path, 'view_all' => $view_all, 'clear_all' => $clear_all);
        return theme('tfk_favorites_links', $variables);
      }
      
    //}
  }
  
}

/**
 * Check if user has favorited any items.
 *
 * @return FALSE if user has no favorite nodes, TRUE if he does.
 */
function tfk_favorites_count_usrf() {
  $view = views_get_view('user_favorites');
  if(is_null($view)) {
    return FALSE;
  } else {
    $view->execute();
  	if(!empty($view->result)) {
  	  return TRUE;
  	} else {
  	  return FALSE;
  	}
  }
}


function tfk_favorites_theme(){
  return array(
    'tfk_favorites_links' => array(
      'template' => 'tfk-favorites-links',
      'variables' => array('list' => NULL),
    )
  );
}

/**
 * AJAX callback for deleting all user favorites.
 *
 * @see tfk_favorites_menu()
 */
function _tfk_fav_del(){
  global $user;
  $flag = flag_get_flag('favorites');
  $fid = $flag->fid;


  $resnew = db_query('select fcid from flag_content where fid = :fid and uid = :uid', array('fid' => $fid, 'uid' => $user->uid));
  foreach ($resnew as $k => $recordnew) {
    $resdel = db_query('delete from flag_content where fcid = :fcid', array('fcid' => $recordnew->fcid));
  }
  $resdel = db_query('delete from flag_content where fid = :fid and uid = :uid', array('fid' => $fid, 'uid' => $user->uid));


  $res = db_query('select content_id from flag_content where fid = :fid and uid = :uid', array('fid' => $fid, 'uid' => $user->uid));
  foreach ($res as $k => $record) {
    $nid = $record->content_id;
    $flag->flag('unflag', $nid, $user->uid,TRUE);
  }
  
  drupal_set_message('Your favorites have been cleared.');

  print TFK_FAVS_AJAX_SUCCESS;
}



/**
 * Preprocessing for the My Favorites page View.
 *
 * Implementation of hook_preprocess_view_view_fields.
 *
 * @param array $variables
 *   Stuff comming from views.
 */
function tfk_favorites_preprocess_views_view_fields(&$variables, $hook) {
  $view = $variables['view'];
  if($view->name == 'user_favorites' && $view->current_display == 'page') {
    $content_type = $variables['row']->_field_data['nid']['entity']->type;
    
    // Flag link.
    $flag_link = flag_create_link('favorites', $variables['row']->nid);
    
    // Body video.
    if(!empty($variables['row']->field_field_deck)) {
      $body = $variables['row']->field_field_deck[0]['rendered']['#markup'];
    // Body slideshow.
    } else if($content_type == 'slideshow' && !empty($variables['row']->field_field_slideshow_description)) {
      $body = $variables['row']->field_field_slideshow_description[0]['rendered']['#markup'];
    }
    
    // Worksheets.
    if($content_type == 'worksheet') {
      if(isset($variables['row']->field_field_grade_level[0])) {
        $grade = $variables['row']->field_field_grade_level[0];
        $grade = render($grade['rendered']);
      } else {
        $grade = '&nbsp;';
      }
      
      
      $variables['fields']['field_grade_level']->content = '
      <div class="field-content content-type"><span class="ctype">WORKSHEET</span>
      <span class="ctype-suffix">GRADE '. $grade. '</span></div>';
      
      // Remove related article.
      $variables['fields']['title']->content = preg_replace('/\<div class="view-full-article"\>.*?\<\/div\>/', '', $variables['fields']['title']->content);
    }
    
    // Quiz.
    if($content_type == 'pdf_quiz') {
      if(isset($variables['row']->field_field_grade_level[0])) {
        $grade = $variables['row']->field_field_grade_level[0];
        $grade = render($grade['rendered']);
      } else {
        $grade = '&nbsp;';
      }

      $variables['fields']['field_grade_level']->content = '
      <div class="field-content content-type"><span class="ctype">QUIZ</span>
      <span class="ctype-suffix">GRADE '. $grade. '</span></div>';
      
      
      // Thumbnail
      $thumbnail = theme('image', array('path' => drupal_get_path('module', 'tfk_search'). '/images/quiz_graphic.gif'));
      
      // Override output.
      $variables['fields']['title']->content = '
        <div class="field-content row2">
          <div class="col1 content-type-'. $content_type. '">'. $thumbnail. '</div>
          <div class="col2">
            <h3 class="title">
              '. $variables['row']->node_title. '
            </h3>
            <div class="search-snippet-info">
             <div class="search-snippet-body"></div>
            <div class="search-result-links">
              <span class="search-result-download-link">
                <a href="'. $variables['row']->field_field_pdf_file_private[0]['rendered']['#markup']. '">Download this Quiz</a>
              </span>
              '. $flag_link. '
            </div>
            </div>
          </div>
        </div>';
    }
    
    // Slideshows and Videos.
    if($content_type == 'slideshow' || $content_type == 'video') {
      // For Slideshows and Videos substitute grade w/ content type.
      $variables['fields']['field_grade_level']->content = '<div class="field-content content-type"><span class="ctype">'.
      strtoupper($content_type).
      '</span><span class="ctype-suffix">&nbsp;</span></div>';

      // Title.
      $title_link = l($variables['row']->node_title, 'node/'. $variables['row']->nid);

      // Additional content box.
      if(!empty($variables['row']->field_field_additional_content)) {
        $additional_content = $variables['row']->field_field_additional_content[0]['raw']['node'];
        $related = ($additional_content->type == 'article') ? 'Related ': '';
        $additional_content_box = '
          <div id="featured-related-content-title" class="addit-content">Additional Content</div>
          <div id="featured-related-content" class="related-content-wrap">
            <div class="addit-related-articles">
              <div class="addit-related-articles-label">'. strtoupper(t($related. '@type:', array('@type' => $content_type))). '</div>
              <div class="addit-related-articles-title">'. l($additional_content->title, 'nid/'. $additional_content->nid). '</div>
          	</div>
          </div>
        ';
      }

      $icon = '<div class="icon"></div>';

      if($content_type == 'video') {
        $related_article = '';
        if(!empty($variables['row']->field_field_video_thumbnail)) {
          #$variables['row']->field_field_video_thumbnail[0]['rendered']['#prefix'] = 'foo';
          $variables['row']->field_field_video_thumbnail[0]['rendered']['#suffix'] = $icon;
          $thumbnail = render($variables['row']->field_field_video_thumbnail);

        }
      } else {
        $related_article = '';
      }

      if($content_type == 'slideshow') {
        // This is a image that is related to the slideshow.
        // We need to link the that image to the slideshow, not the image itself.
        if(!empty($variables['row']->field_field_image)) {
          $_image = render($variables['row']->field_field_image);
          $thumbnail = l($_image. $icon, 'node/'. $variables['row']->nid, array('html' => TRUE, 'attributes' => array('title' => $variables['row']->node_title)));
        } else {
          $thumbnail = '';
        }

      }

      // The HTML below was defined within the title field of the View.
      // Worksheets use it, but Slideshows and Videos need to override it:
      //  - The title is not linked for worksheets, but it is for Videos and Slideshows.
      //  - Slideshows have no related article, only Videos.
      //  - The body field comes from a different place.
      //  - Thumbnails come from a different place in Slideshows, Videos and Worksheets.
      $variables['fields']['title']->content = '
        <div class="field-content row2">
          <div class="col1 content-type-'. $content_type. '">'. $thumbnail. '</div>
          <div class="col2">
            <h3 class="title">
              '. $title_link. '
            </h3>

            '. $related_article. '

            <div class="search-snippet-info">
             <div class="search-snippet-body">
             	 '. $body. '
             </div>
            <div class="search-result-links">
              '. $flag_link. '
            </div>
            </div>

            '. $additional_content_box. '

          </div>
        </div>';
    }
  }
}

/**
 * Preprocess Views list.
 */
function tfk_favorites_preprocess_views_view_list(&$variables, $hook) {
  // Add element id to ordered list. Views only allows classes.
  $variables['list_type_prefix'] = '<ol id="tfk-search-results-photos-video" class="search-results">';
}


//function tfk_favorites_preprocess_views_view(&$variables, $hook) {
//  $view = $variables['view'];
//  if($view->name == 'user_favorites' && $view->current_display == 'page') {
//  }
//}

/**
 * Implementation of hook_preprocess_page.
 */
function tfk_favorites_preprocess_page(&$variables, $hook) {
  $test = null;
  if(arg(0) == 'my-favorites') {
    //global $user;
    //$variables['section_title'] = empty(array_intersect(array('administrator', 'editor', 'teacher'), array_values($user->roles))) ? 'ACCESS DENIED': 'MY FAVORITES';
    //$variables['section_title'] = 'MY FAVORITES';

    // Since the My Favorites page uses so many styles that are already defined in Photos and Videos, we recyle tfk_search.css.
    drupal_add_css(drupal_get_path('module', 'tfk_search'). '/css/tfk_search.css', 'file');

    // We also recycle some left column block and content styles from worksheets.
    drupal_add_css(drupal_get_path('module', 'tfk_search'). '/css/tfk_worksheets.css', 'file');

    // Finally we inherit and override as needed from a dedicated favorites stylesheet.
    drupal_add_css(drupal_get_path('module', 'tfk_favorites'). '/css/tfk_favorites.css', 'file');
  }
}


function tfk_favorites_preprocess_node(&$variables){

  if(array_key_exists('node', $variables) && $variables['node']->type == 'store') {

      //we dont want title to be displayeed
      $variables['title'] = '';
      $store_items = array();
      $store_items_bottom = array();
      $store_books = array();

      $items_tmp = field_get_items('node', $variables['node'], 'field_store_items');
      foreach($items_tmp as $item){
        $item_tmp = entity_load('field_collection_item', array($item['value']));
        $link_url = $item_tmp[$item['value']]->field_store_item_link_url['und'][0]['safe_value'];

        if(strlen($link_url) > 0 && $link_url != 'http://'){
          $image = $item_tmp[$item['value']]->field_store_item_image['und'][0]['uri'];
          $image_url = file_create_url($image);
          $store_items[$item['value']]['link_url'] = $link_url;
          $store_items[$item['value']]['image_url'] = $image_url;
        }

      }

      $books_tmp = field_get_items('node', $variables['node'], 'field_store_books');
      $num_items = count($books_tmp);
      foreach($books_tmp as $book_id => $book){
        $book_cover_tmp = field_get_items('node',$book['node'],'field_book_image');
        $book_cover = file_create_url($book_cover_tmp[0]['uri']);

        $book_title = $book['node']->title;

        $book_link_tmp = field_get_items('node',$book['node'],'field_book_link');
        $book_link = $book_link_tmp[0]['safe_value'];

        $book_author_tmp = field_get_items('node',$book['node'],'field_book_author');
        $book_author = $book_author_tmp[0]['safe_value'];

        $store_books[$book_id]['book_cover'] = $book_cover;
        $store_books[$book_id]['book_title'] = $book_title;
        $store_books[$book_id]['book_link'] = $book_link;
        $store_books[$book_id]['book_author'] = $book_author;
        $attributes = array();
        
        $attributes['class'][] = 'featured-book';
        if ($book_id == 0) {
          $attributes['class'][] = 'first';
        }
        if ($book_id == $num_items - 1) {
          $attributes['class'][] = 'last';
        }
        $store_books[$book_id]['attributes'] = drupal_attributes($attributes);
      }


      $items_tmp = field_get_items('node', $variables['node'], 'field_store_items_bottom');
      foreach($items_tmp as $item){

        $item_tmp = entity_load('field_collection_item', array($item['value']));
        $link_url = $item_tmp[$item['value']]->field_item_url['und'][0]['safe_value'];
        if(strlen($link_url) > 0 && $link_url != 'http://'){
          $image = $item_tmp[$item['value']]->field_item_image['und'][0]['uri'];
          $image_url = file_create_url($image);

          $store_items_bottom[$item['value']]['link_url'] = $link_url;
          $store_items_bottom[$item['value']]['image_url'] = $image_url;
        }
      }

      $variables['store_books'] = $store_books;
      $variables['store_items'] = $store_items;
      $variables['store_items_bottom'] = $store_items_bottom;

  }


}
