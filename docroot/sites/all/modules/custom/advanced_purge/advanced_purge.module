<?php

/**
 * @file
 * Provides the cache purging logic needed for TFK's flag-driven channels.
 */

function advanced_purge_init() {

}


function advanced_purge_node_insert($node) {
  
}

function advanced_purge_node_update($node) {
  
  $test = null;
  
  $flags = flag_get_counts('node', $node->nid);
  
  
}

function advanced_purge_node_delete($node) {

}

/* Implementation of hook_flag.
 */
function advanced_purge_flag($action, $flag, $content_id, $account, $fcid) {

  // Force a node_save() when flagging nodes on /admin/content.
  // By default the "update" button does not invoke node_save().
  //$path = arg();
  #$menu_item = menu_get_item();
  #$node = menu_get_object();
  
  
  // Flag name to Views bin/cid and Varnish path mapping.
  $display_cache = array();
  
  // Homepage primary touts.
  $display_cache['homepage_top_story'] = array();
  $display_cache['homepage_top_story']['cache_block'] = array('views:homepage_top_story-block_1', 'views:homepage_top_story-block_2'); // Block cache bin/cids: logged in, anon.
  $display_cache['homepage_top_story']['cache_views_data'] = array('homepage_top_story:block_1', 'homepage_top_story:block_2', 'homepage_top_story:attachment_1',); // Views cache bin cids: logged in, anon, attachment.
  //$display_cache['homepage_top_story']['path'] = 'node'; // What page to purge from Varnish.
  
  // News primary touts.
  $display_cache['news_top_story'] = array();
  $display_cache['news_top_story']['cache_block'] = array('views:homepage_top_story-block_3', 'views:homepage_top_story-block_4'); // Block cache bin/cids.
  $display_cache['news_top_story']['cache_views_data'] = array('homepage_top_story:block_3', 'homepage_top_story:block_4', 'homepage_top_story:attachment_2',); // Views cache bin.
  //$display_cache['news_top_story']['path'] = 'news';
  
  // Kid rep primary touts.
  $display_cache['kid_reporter_top_story'] = array();
  $display_cache['kid_reporter_top_story']['cache_block'] = array('views:homepage_top_story-block_5', 'views:homepage_top_story-block_6'); // Block cache bin/cids.
  $display_cache['kid_reporter_top_story']['cache_views_data'] = array('homepage_top_story:block_5', 'homepage_top_story:block_6', 'homepage_top_story:attachment_3',); // Views cache bin.
  //$display_cache['kid_reporter_top_story']['path'] = 'kid-reporters';
  
  // Homepage secondary touts (news block) mapping.
  $display_cache['homepage_news_block'] = array();
  $display_cache['homepage_news_block']['cache_block'] = array('views:homepage_news_block-block_1', 'views:homepage_news_block-block_2'); // Block cache bin/cids.
  $display_cache['homepage_news_block']['cache_views_data'] = array('homepage_news_block:block_1', 'homepage_news_block:block_2'); // Views cache bin.
  //$display_cache['homepage_news_block']['path'] = 'node';
  
  // News channel secondary touts.
  $display_cache['news_news_block'] = array();
  $display_cache['news_news_block']['cache_block'] = array('views:homepage_news_block-block_3', 'views:homepage_news_block-block_4');
  $display_cache['news_news_block']['cache_views_data'] = array('homepage_news_block:block_3', 'homepage_news_block:block_4');
  //$display_cache['news_top_story']['path'] = 'news';
  
  // Kid rep channel secondary touts.
  $display_cache['kid_reporter_news_block'] = array();
  $display_cache['kid_reporter_news_block']['cache_block'] = array('views:homepage_news_block-block_5', 'views:homepage_news_block-block_6');
  $display_cache['kid_reporter_news_block']['cache_views_data'] = array('homepage_news_block:block_5', 'homepage_news_block:block_6');
  //$display_cache['kid_reporter_news_block']['path'] = 'kid-reporters';
  
  
  if(array_key_exists($flag->name, $display_cache)) {
    
    
    // Clear Memcached (Views).
    #cache_get($cid, $bin);
    # cache_get($cid, 'cache_views');
    $results = array();
    foreach($display_cache[$flag->name] as $flag_name => $bin) {
      foreach($bin as $cid) {
        $results["\$flag_name: $flag_name, \$bin: $bin, \$cid: $cid"] = cache_clear_all($cid, $bin, TRUE);
      }
    }
    
    error_log(print_r($results, TRUE));
    // TODO watchdog results.
    #drupal_set_message('The fo');
    
    
    #cache_set($cid, $data, 'cache_views');
    # cache_set($cid, $data, $bin, $expire);
    
    
    // Varnish purge/expire code.
    /*
    global $base_path;
    $path = $flag_channel_map[$flag->name];
    $expire = array();
    
    // Special handling for front-page.
    $site_frontpage = variable_get('site_frontpage', 'node');
    if($path == $site_frontpage) {
      $expire[] = '';
      $expire[] = 'rss.xml';
      $expire[] = $site_frontpage;
    } else {
      $expire[] = $path;
    }
    
    // Path alias
    $path_alias = url($path, array('absolute' => FALSE));
    // Remove the base path
    $expire[] = substr($path_alias, strlen($base_path));
    
    // Allow other modules to modify the list prior to expiring
    drupal_alter('expire_cache', $expire, $node, $paths);
    
    $expire = array_unique($expire);
    
    // Clear Varnish (anonymous users).
    module_load_include('module', 'expire'); // Required for expire_print_r() in purge.inc line 203.
    module_load_include('inc', 'purge'); // Contains purge_urls(), has Acquia-Varnish purging logic.
    $results = purge_urls($expire);
    purge_logging($results);
    */
 
    
  }
  

}


