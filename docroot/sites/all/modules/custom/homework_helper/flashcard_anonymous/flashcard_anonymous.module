<?php

/**
 * @file
 * Prevents direct access to Flashcards.
 */

/**
 * Implements hook_menu().
 */
function flashcard_anonymous_menu() {
  $items = array();

  $items['flashcard/%flashcard_anonymous_uuid'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'node_page_view',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['flashcard/%flashcard_anonymous_uuid/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['flashcard/%flashcard_anonymous_uuid/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function flashcard_anonymous_menu_alter(&$items) {
  $items['node/%node']['access callback'] = 'flashcard_anonymous_access';
}

/**
 * Implements hook_permission().
 */
function flashcard_anonymous_permission() {
  return array(
    'view anonymous flashcards' => array(
      'title' => t('View anonymous flashcards'),
    ),
    'create public flashcards' => array(
      'title' => t('Create public flashcards'),
    ),
  );
}

/**
 * Disallow direct access to flashcards.
 */
function flashcard_anonymous_access($op, $node) {
  if ($node->type == 'flashcard') {
    $account = user_load($node->uid);
    return (user_access('view anonymous flashcards') || (user_access('create public flashcards', $account)));
  }
  else {
    return node_access($op, $node);
  }
}

/**
 * Load flashcards by their UUID.
 */
function flashcard_anonymous_uuid_load($uuid) {
  return ($nid = uuid_node_find($uuid)) ? node_load($nid) : FALSE;
}

/**
 * Set the full page variable for our custom loader argument.
 */
function flashcard_anonymous_process_node(&$variables) {
  if ($variables['type'] == 'flashcard') {
    $variables['page'] = $variables['view_mode'] == 'full' && flashcard_anonymous_is_page($variables['node']);
  }
}

/**
 * Add the node object to the page variables. It will otherwise not be added,
 * as it relies on menu_get_object() in template_preprocess_page.
 */
function flashcard_anonymous_preprocess_page(&$variables) {
  if ($node = menu_get_object('flashcard_anonymous_uuid')) {
    $variables['node'] = $node;
  }
}

/**
 * Returns whether the current page is the full page view of the passed-in flashcard.
 */
function flashcard_anonymous_is_page($node) {
  $page_node = menu_get_object('flashcard_anonymous_uuid');
  return (!empty($page_node) ? $page_node->nid == $node->nid : FALSE);
}

/**
 * Implements hook_uuid_info().
 */
function flashcard_anonymous_uuid_info() {
  return array(
    'flashcard_anonymous' => array(
      'callback' => 'flashcard_anonymous_generate_uuid',
      'title' => t('Flashcard string'),
    ),
  );
}

/**
 * Generates an 8 character hexadecimal sting.
 */
function flashcard_anonymous_generate_uuid() {
    
    
    $tables = array('node',
                    'node_revisions',
                    'comments',
                    'term_data',
                    'users',
                    'vocabulary'
    );
    
    
    while($tmp_uuid = sprintf('%04x%04x', mt_rand(0, 65535), mt_rand(0, 65535))){
        
        $unique = 1;
        
        foreach($tables as $table){
            $sql = db_query('select uuid from :table where uuid = :uuid',array('uuid'=>$uuid,'table'=>$table));
            $record = $sql->fetch();
            if(isset($record->uuid)){
                $unique = 0;
            }
        }
        
        if($unique == 0){
            return $tmp_uuid;
        }
        
        
    }
    
}



//function flashcard_anonymous_generate_uuid() {
//  //return sprintf('%04x%04x', mt_rand(0, 65535), mt_rand(0, 65535));
//}