<?php

/**
 * @file
 * A multistep form for interactive Grammar Wizard quizzes.
 */

/**
 * Implements hook_node_view().
 */
function grammar_wizard_node_view($node, $view_mode) {
  if ($node->type == 'grammar_practice' && $view_mode == 'full') {
    // Because we show random questions, don't cache these pages.
    $GLOBALS['conf']['cache'] = FALSE;
    $node->content['grammar_wizard'] = drupal_get_form('grammar_wizard_multistep_form', $node);
  }
}

/**
 * A multistep form, where a different and sequential form
 * is presented on each step of the form.
 *
 * In the AJAX version, the form is replaced for each wizard section. In the
 * multistep version, it causes a new page load.
 *
 * @param $form
 * @param $form_state
 */
function grammar_wizard_multistep_form($form, &$form_state, $node) {
  module_load_include('inc', 'grammar_wizard', 'grammar_wizard.pages');

  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  // Make sure the form is cached so data is stored between page loads.
  $form_state['cache'] = TRUE;
  // The questions should be cached, so that they aren't shuffled while on the same form.
  $questions = isset($form_state['storage']['questions']) ? $form_state['storage']['questions'] : grammar_wizard_prepare_questions($node);
  $form_state['storage']['questions'] = $questions;

  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 0 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;
  $last_step = count($questions) - 1;

  $step_name = "step_$step";
  $form[$step_name] = $questions[$step];
  if (isset($form[$step_name]['question'])) {
    if (isset($form_state['storage']['correct_answer'])) {
      // Disable the radio buttons if the question was answered.
      $form[$step_name]['question']['#disabled'] = TRUE;
      if (!$form_state['storage']['correct_answer']) {
        // If they answered the question wrong, then mark the answer they chose.
        $answer = $form_state['storage']['values'][$step_name]['question'];
        $alpha_answer = $form[$step_name]['question']['#options'][$answer];
        $form[$step_name]['question']['#options'][$answer] = '<span class="grammar-wizard-incorrect">' . $alpha_answer . '</span>';
      }
    }
    $form[$step_name]['question']['#default_value'] = !empty($form_state['values'][$step_name]['question']) ? $form_state['values'][$step_name]['question'] : '';
  }

  $form['view_rules'] = array(
    '#prefix' => '<div id="grammar-wizard-see-rules">',
    '#suffix' => '</div>',
    '#weight' => -2,
    'header' => array(
      '#prefix' => '<h2>',
      '#suffix' => '</h2>',
      '#markup' => t('See the Rules Again'),
    ),
    'body' => array(
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#markup' => t("You can read the rules, but you'll have to restart the quiz again."),
    ),
    'link' => array(
      '#theme' => 'link',
      '#text' => t('View Rules'),
      '#path' => 'homework-helper/punctuation-practice/rules/' . $form[$step_name]['#parent_nid'],
      '#options' => array(
        'attributes' => array(
          'class' => array('button'),
        ),
      ),
    ),
  );

  if ($step == $last_step) {
    $form['description'] = grammar_wizard_final_question_content($form_state);
  }
  else {
    if ($step == 0) {
      $form['instructions'] = array(
        '#prefix' => '<div id="grammar-instructions">',
        '#suffix' => '</div>',
        '#markup' => $form['step_0']['#instructions'],
        '#weight' => -3,
      );
    }

    $form['numbering'] = array(
      '#prefix' => '<div id="grammar-wizard-numbering">',
      '#suffix' => '</div>',
      '#markup' => ($step + 1) . ' of ' . (count($questions) - 1),
      '#weight' => -1,
    );

    // Only show this button if no answer has been submitted or if an incorrect answer was submitted.
    if (!isset($form_state['storage']['correct_answer']) || !$form_state['storage']['correct_answer']) {
      $form['check_answer'] = array(
        '#type' => 'submit',
        '#value' => !isset($form_state['storage']['correct_answer']) ? t('Check Answer') : t('Try Again'),
        '#name' => !isset($form_state['storage']['correct_answer']) ? 'check_answer' : 'try_again',
        '#weight' => 1,
        '#ajax' => array(
          'wrapper' => 'wizard-form-wrapper',
          'callback' => 'grammar_wizard_multistep_form_callback',
        ),
      );
    }

    // Only show this button if an answer was submitted.
    if (isset($form_state['storage']['correct_answer'])) {
      $form['next'] = array(
        '#type' => 'submit',
        '#value' => ($step == $last_step - 1) ? t('See my Results') : t('Next Question'),
        '#name' => ($step == $last_step - 1) ? 'see_results' : 'next_question',
        '#access' => isset($form_state['storage']['correct_answer']),
        '#weight' => 2,
        '#ajax' => array(
          'wrapper' => 'wizard-form-wrapper',
          'callback' => 'grammar_wizard_multistep_form_callback',
        ),
      );
      $form['question_result'] = $form_state['storage']['question_result'];
    }
  }

  return $form;
}

/**
 * Ajax callback for grammar wizard quiz form.
 */
function grammar_wizard_multistep_form_callback($form, &$form_state) {
  // Form needs to be rebuilt because it will possibly have different content.
  return drupal_rebuild_form('grammar_wizard_multistep_form', $form_state);
}

/**
 * Submit function for grammar_wizard_multistep_form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function grammar_wizard_multistep_form_submit($form, &$form_state) {
  // Save away the current information.
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }

  // Determine which button was pressed.
  switch ($form_state['triggering_element']['#name']) {
    case 'next_question':
    case 'see_results':
      // Increment or decrement the step as needed.
      $form_state['storage']['step']++;
      // If values have already been entered for this step, recover them from
      // $form_state['storage'] to pre-populate them.
      $step_name = 'step_' . $form_state['storage']['step'];
      if (!empty($form_state['storage']['values'][$step_name])) {
        $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
      }
      unset($form_state['storage']['correct_answer']);
      break;

    case 'check_answer':
      grammar_wizard_check_answer($form, $form_state);
      break;

    case 'try_again':
      grammar_wizard_try_again($form, $form_state);
      break;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Prepare final step content.
 */
function grammar_wizard_final_question_content($form_state) {
  $correct = 0;
  $incorrect = 0;

  foreach($form_state['storage']['student_answers'] as $answer) {
    if ($answer == 1) {
      $correct++;
    }
    if ($answer == 0) {
      $incorrect++;
    }
  }

  $output = array(
    '#prefix' => '<div id="grammar-wizard-results">',
    '#suffix' => '</div>',
    '#weight' => 0,
    'title' => array(
      '#prefix' => '<h2>',
      '#suffix' => '</h2>',
      '#markup' => t('Your Results') . ':',
    ),
    'correct' => array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#markup' => t('Correct') . ': ' . $correct,
    ),
    'incorrect' => array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#markup' => t('Incorrect') . ': ' . $incorrect,
    ),
  );
  if ($incorrect == 0) {
    $output['congrats'] = array(
      '#prefix' => '<h2>',
      '#suffix' => '</h2>',
      '#markup' => t('Congratulations!'),
    );
    $output['#suffix'] .= views_embed_view('grammar_practice_trophies');
  }

  return $output;
}

/**
 * Submit callback for answer checking button on grammar wizard quiz.
 */
function grammar_wizard_check_answer($form, &$form_state) {
  $current_step = 'step_' . $form_state['storage']['step'];
  $correct_answer = check_plain($form[$current_step]['#correct_answer']);
  $selected_answer = $form_state['input'][$current_step]['question'];

  // Perform validaton?
  if (!isset($selected_answer)) {
    drupal_set_message('Please select an answer.', 'warning');
    return;
  }

  // Set the interface text based on correctness of answer.
  if ($form_state['storage']['correct_answer'] = ($correct_answer == $selected_answer)) {
    $title = t('You Got It!');
    $rule = t('You Understand');
  }
  else {
    $title = t('Incorrect');
    $rule = t('Remember');
  }

  // Step is either 0 or 1, corresponding to the boolean 'correct_answer'.
  $form_state['storage']['student_answers'][$current_step] = (int) $form_state['storage']['correct_answer'];

  // Build a render array of our results.
  $form_state['storage']['question_result'] = array(
    '#prefix' => '<div id="grammar-wizard-result">',
    '#suffix' => '</div>',
    '#weight' => 1,
    'title' => array(
      '#prefix' => '<h2>',
      '#suffix' => '</h2>',
      '#markup' => $title,
    ),
    'rule' => array(
      '#prefix' => '<div class="grammar-wizard-rule">',
      '#suffix' => '</div>',
      'title' => array(
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
        '#markup' => $rule . ':',
      ),
      'body' => array(
        '#markup' => $form[$current_step]['#rule'],
      ),
      'example' => array(
        '#prefix' => '<div class="grammar-wizard-example">',
        '#suffix' => '</div>',
        'title' => array(
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
          '#markup' => t('Example') . ':',
        ),
        'body' => array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => $form[$current_step]['#rule_example'],
        ),
      ),
    ),
  );
}

/**
 * Submit callback for try again button on grammar wizard quiz.
 */
function grammar_wizard_try_again($form, &$form_state) {
  $current_step = 'step_' . $form_state['storage']['step'];

  // Clear out elements indicating that the question was answered.
  unset($form_state['storage']['correct_answer']);
  unset($form_state['storage']['question_result']);

  // Ensure that the answer is not marked as correct.
  $form_state['storage']['student_answers'][$current_step] = 0;
}
