<?php

/**
 * @file
 * A multistep form for interactive A+ papers.
 */

/**
 * Implements hook_node_view().
 */
function aplus_papers_node_view($node, $view_mode) {
  if ($node->type == 'a_paper' && $view_mode == 'full') {
    // Load potential editor.
    foreach (filter_formats() as $format => $object) {
      if ($profile = wysiwyg_get_profile($format)) {
        wysiwyg_load_editor($profile);
        wysiwyg_add_plugin_settings($profile);
        wysiwyg_add_editor_settings($profile, 'advanced');
      }
    }
    drupal_add_js(drupal_get_path('module', 'aplus_papers') . '/js/aplus_papers.js', array('scope' => 'footer'));
    module_load_include('inc', 'aplus_papers', 'aplus_papers.pages');
    $steps = aplus_papers_prepare_steps($node);
    $node->content['aplus_papers'] = drupal_get_form('aplus_papers_multistep_form', $steps);
  }
}

/**
 * Create a checklist of all steps.
 */
function aplus_papers_checklist($steps, $current) {
  array_pop($steps);
  $items = array();
  foreach ($steps as $step => $data) {
    if (isset($data['name']) || isset($data['title'])) {
      unset($step);
    }
    if (isset($data['#checklist'])) {
      if ($step) {
        $classes = array();
        if ($current > $step) {
          $classes[] = 'checked';
        }
        if ($current == $step) {
          $classes[] = 'current';
        }
        $items[] = array('data' => $data['#checklist'], 'class' => $classes);
      }
    }
  }

  $title = '';
  $checklist_title = db_query("SELECT field_paper_check_title_value FROM {field_revision_field_paper_check_title} WHERE entity_id = :nid", array(':nid' => $steps[0]['#parent_nid']))->fetchField();
  if ($checklist_title) {
    $title = $checklist_title;
  }

  return array(
    '#prefix' => '<div id="aplus-papers-checklist-block">',
    '#suffix' => '</div>',
    'title' => array(
      '#prefix' => '<div class="aplus-papers-checklist-title">',
      '#suffix' => '</div>',
      '#markup' => $title,
    ),
    'list' => array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'class' => array('aplus-papers-checklist'),
      ),
    ),
  );
}

/**
 * A multistep form, where a different and sequential form
 * is presented on each step of the form.
 *
 * In the AJAX version, the form is replaced for each wizard section. In the
 * multistep version, it causes a new page load.
 *
 * @param $form
 * @param $form_state
 */
function aplus_papers_multistep_form($form, &$form_state, $steps) {
  drupal_add_css(drupal_get_path('module', 'aplus_papers') . '/aplus-papers-print.css', array('media' => 'print'));

  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 0 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;

  $last_step = count($steps) - 1; 

  $form['checklist'] = aplus_papers_checklist($steps, $step);

  $step_name = "step_$step";
  $step_values = $form_state['values'][$step_name];
  $form[$step_name] = $steps[$step];
  if (isset($form[$step_name]['textarea'])) {
    $form[$step_name]['textarea']['#default_value'] = !empty($step_values['textarea']['value']) ? $step_values['textarea']['value'] : '';
    $form[$step_name]['textarea']['#rows'] = 6;
  }
  if (isset($form[$step_name]['title'])) {
    $form[$step_name]['title']['#default_value'] = !empty($step_values['title']['value']) ? $step_values['title']['value'] : '';
  }
  if (isset($form[$step_name]['name'])) {
    $form[$step_name]['name']['#default_value'] = !empty($step_values['name']) ? $step_values['name'] : '';
  }
  if (isset($form[$step_name]['date'])) {
    $form[$step_name]['date']['#default_value'] = !empty($step_values['date']) ? $step_values['date'] : '';
  }
  $ajax_default = array(
    'wrapper' => 'wizard-form-wrapper',
    'callback' => 'aplus_papers_multistep_form_callback',
    'effect' => 'fade',
    'progress' => array(
      'type' => 'throbber',
      'message' => '<div class="hh-throbber-message">' . t('Please wait') . '</div>',
    ),
  );
  if ($step == 0) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Start Helper'),
      '#prefix' => '<div class="aplus-start-button">',
      '#suffix' => '</div>',
      '#ajax' => $ajax_default,
    );
  }
  else {
    $form['submit_buttons'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="aplus-submit-buttons">',
      '#suffix' => '</div>',
    );
    $form['submit_buttons']['start_over'] = array(
      '#theme' => 'link',
      '#path' => 'node/' . $form[$step_name]['#parent_nid'],
      '#text' => t('Start Over'),
      '#options' => array(
        'attributes' => array(
          'class' => array('aplus-start-over'),
        ),
      ),
    );

    $form['submit_buttons']['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Back'),
      '#attributes' => array(
        'class' => array('aplus-back'),
      ),
      // Since all info will be discarded, don't validate on 'prev'.
      '#limit_validation_errors' => array(),
      // #submit is required to use #limit_validation_errors
      '#submit' => array('aplus_papers_multistep_form_submit'),
      '#ajax' => $ajax_default,
    );

    if ($step < $last_step) {
      $form['submit_buttons']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Next'),
        '#attributes' => array(
          'class' => array('aplus-next'),
        ),
        '#ajax' => $ajax_default,
      );
    }
    if ($step == $last_step - 1) {
      // Get default values from previous form entries.
      foreach ($form[$step_name] as $key => $data) {
        $form_state['#review_step'] = $step_name;
        if (is_numeric($key)) {
          foreach ($data as $field => $field_data) {
            if ($field == 'name' || $field == 'date') {
              $form[$step_name][$key][$field]['#default_value'] = $form_state['storage']['values']["step_$key"][$field];
            }
            if ($field == 'textarea' || $field == 'title') {
              $form[$step_name][$key][$field]['#default_value'] = $form_state['storage']['values']["step_$key"][$field]['value'];
            }
          }
        }
      }
    }
    if ($step == $last_step) {
      $form['checklist']['submit'] = array(
        '#prefix' => '<div class="aplus-print-save-buttons">',
        '#suffix' => '</div>',
        'print' => array(
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#theme' => 'link',
          '#path' => '',
          '#text' => t('Print'),
          '#options' => array(
            'external' => TRUE,
            'attributes' => array(
              'class' => array('button'),
              'onclick' => array('window.print();return false;'),
            ),
          ),
        ),
        'save' => array(
          '#type' => 'submit',
          '#value' => t('Save'),
          '#attributes' => array(
            'title' => t('Save your paper to your computer.'),
          ),
        ),
      );
      $form['description'] = aplus_papers_final_step_content($form_state);
    }
  }
  
  return $form;
}

function aplus_papers_multistep_form_callback($form, $form_state) {
  return $form;
}

/**
 * Submit function for aplus_papers_multistep_form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function aplus_papers_multistep_form_submit($form, &$form_state) {
  // Save away the current information.
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }

  // If coming from review step, pre-populate all fields with that data.
  if (isset($form_state['#review_step'])) {
    $review_step = $form_state['#review_step'];
    if (isset($form_state['input'][$review_step])) {
      foreach ($form_state['input'][$review_step] as $step => $fields) {
        $form_state['storage']['values']["step_$step"] = $fields;
      }
    }
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next') || $form_state['triggering_element']['#value'] == t('Start Helper')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
  }
  if ($form_state['triggering_element']['#value'] == t('Back')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }
  if ($form_state['triggering_element']['#value'] == t('Save')) {
    // Save the paper as an .rtf file
    drupal_add_http_header('Content-Disposition', 'attachment; filename="a-plus-papers.rtf"');
    drupal_add_http_header('Content-Type', 'application/rtf');
    $paper = aplus_papers_save_content($form_state);
    print $paper;
    exit;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Prepare final step content.
 */
function aplus_papers_final_step_content($form_state) {
  $output = array(
    '#prefix' => '<div id="aplus-final-step">',
    '#suffix' => '</div>',
    '#weight' => 0,
    'node-title' => array(
      '#prefix' => '<h2 class="node-title">',
      '#suffix' => '</h2>',
      '#markup' => t('Completed Paper Preview'),
      '#weight' => 0,
    ),
  );
  foreach ($form_state['storage']['values'][$form_state['#review_step']] as $step => $data) {
    if (isset($data['date'])) {
      $output['date'] = array(
        '#prefix' => '<div class="paper-date">',
        '#suffix' => '</div>',
        '#markup' => check_plain($data['date']),
        '#weight' => 1,
      );
    }
    if (isset($data['name'])) {
      $output['name'] = array(
        '#prefix' => '<div class="student-name">',
        '#suffix' => '</div>',
        '#markup' => check_plain($data['name']),
        '#weight' => 2,
      );
    }
    if (isset($data['title'])) {
      $output['title'] = array(
        '#prefix' => '<div class="paper-title">',
        '#suffix' => '</div>',
        '#markup' => check_markup($data['title']['value'], $data['title']['format']),
        '#weight' => 3,
      );
    }
    if (isset($data['textarea'])) {
      if (!isset($output['textarea'])) {
        $output['textarea'] = array(
          '#prefix' => '<div class="paper-textarea">',
          '#suffix' => '</div>',
          '#weight' => 4,
        );
      }
      $output['textarea'][] = array(
        '#markup' => check_markup($data['textarea']['value'], $data['textarea']['format']),
      );
    }
  }
  return $output;
}

/**
 * Prepare content for rtf file by wrapping it in the rtf mumbojumbo.
 */
function aplus_papers_save_content($form_state) {
  $output = '{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350' . "\n" . '{\fonttbl\f0\fswiss\fcharset0 Helvetica;}' . "\n" . '{\colortbl;\red255\green255\blue255;}' . "\n" . '\margl1440\margr1440\vieww34100\viewh17040\viewkind0' . "\n" . '\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qr\pardirnatural' . "\n\n" . '\f0\fs30 \cf0 ';

  foreach ($form_state['storage']['values'][$form_state['#review_step']] as $step => $data) {
    $output .= isset($data['name']) ? check_plain($data['name'])  . "\\" . "\n" : '';
    $output .= isset($data['date']) ? check_plain($data['date']) . "\n" : '';
    $output .= isset($data['title']['value']) ? '\fs24 \\' . "\n" .  '\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural' . "\n\n" . '\fs32 \cf0 ' . aplus_html_to_rtf($data['title']) . "\n" . "\\\n" : '';
    $output .= isset($data['textarea']['value']) ? '\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl480\slmult1\ql\qnatural\pardirnatural' . "\n\n" . '\fs24 \cf0 ' . "\n" . aplus_html_to_rtf($data['textarea']) : '';
  }
  $output .= '}';
  return $output;
}

/**
 * Convert html tags to rtf formatting.
 * We expect only p, em, strong, and u tags.
 */
function aplus_html_to_rtf($data) {
  $output = check_markup($data['value'], $data['format']);
  $output = str_replace('<p>', "\n\\\n\\\n	", $output);
  $output = str_replace('</p>', "", $output);
  $output = str_replace('&nbsp;', " ", $output);
  $output = str_replace('<em>', "\n\i ", $output);
  $output = str_replace('</em>', "\n\i0 ", $output);
  $output = str_replace('<strong>', "\n\b ", $output);
  $output = str_replace('</strong>', "\n\b0 ", $output);
  $output = str_replace('<u>', "\n\ul ", $output);
  $output = str_replace('</u>', "\n\ulnone ", $output);

  return $output;
}
