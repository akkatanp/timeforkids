<?php

/**
 * @file
 * Provides the cache purging logic needed for TFK's flag-driven channels.
 */


/* Implementation of hook_flag.
 */
function advanced_purge_flag($action, $flag, $content_id, $account, $fcid) {
  //$path = arg();
  #$menu_item = menu_get_item();
  #$node = menu_get_object();

  // Flag name to Views bin/cid and Varnish path mapping.
  $display_cache = array();
  
  // Homepage primary touts.
  $display_cache['homepage_top_story'] = array();
  $display_cache['homepage_top_story']['cache_block'] = array('views:homepage_top_story-block_1', 'views:homepage_top_story-block_2'); // Block cache bin/cids: logged in, anon.
  $display_cache['homepage_top_story']['cache_views_data'] = array('homepage_top_story:block_1', 'homepage_top_story:block_2', 'homepage_top_story:attachment_1',); // Views cache bin cids: logged in, anon, attachment.
  $display_cache['homepage_top_story']['path'] = '<front>'; // What page to purge from Varnish and page cache (for anons).
  
  // News primary touts.
  $display_cache['news_top_story'] = array();
  $display_cache['news_top_story']['cache_block'] = array('views:homepage_top_story-block_3', 'views:homepage_top_story-block_4'); // Block cache bin/cids.
  $display_cache['news_top_story']['cache_views_data'] = array('homepage_top_story:block_3', 'homepage_top_story:block_4', 'homepage_top_story:attachment_2',); // Views cache bin.
  $display_cache['news_top_story']['path'] = 'news';
  
  // Kid rep primary touts.
  $display_cache['kid_reporter_top_story'] = array();
  $display_cache['kid_reporter_top_story']['cache_block'] = array('views:homepage_top_story-block_5', 'views:homepage_top_story-block_6'); // Block cache bin/cids.
  $display_cache['kid_reporter_top_story']['cache_views_data'] = array('homepage_top_story:block_5', 'homepage_top_story:block_6', 'homepage_top_story:attachment_3',); // Views cache bin.
  $display_cache['kid_reporter_top_story']['path'] = 'kid-reporters';
  
  // Homepage secondary touts (news block) mapping.
  $display_cache['homepage_news_block'] = array();
  $display_cache['homepage_news_block']['cache_block'] = array('views:homepage_news_block-block_1', 'views:homepage_news_block-block_1_anon'); // Block cache bin/cids.
  $display_cache['homepage_news_block']['cache_views_data'] = array('homepage_news_block:block_1', 'homepage_news_block:block_1_anon'); // Views cache bin.
  $display_cache['homepage_news_block']['path'] = '<front>';
  
  // News channel secondary touts.
  $display_cache['news_news_block'] = array();
  $display_cache['news_news_block']['cache_block'] = array('views:homepage_news_block-block_3', 'views:homepage_news_block-block_3_anon');
  $display_cache['news_news_block']['cache_views_data'] = array('homepage_news_block:block_3', 'homepage_news_block:block_3_anon');
  $display_cache['news_top_story']['path'] = 'news';
  
  // Kid rep channel secondary touts.
  $display_cache['kid_reporter_news_block'] = array();
  $display_cache['kid_reporter_news_block']['cache_block'] = array('views:homepage_news_block-block_5', 'views:homepage_news_block-block_5_anon');
  $display_cache['kid_reporter_news_block']['cache_views_data'] = array('homepage_news_block:block_5', 'homepage_news_block:block_5_anon');
  $display_cache['kid_reporter_news_block']['path'] = 'kid-reporters';
  
  // Homepage mini-site.
  $display_cache['homepage_minisite'] = array();
  $display_cache['homepage_minisite']['cache_block'] = array('views:homepage_minisite-block_1', 'views:homepage_minisite-block_2');
  $display_cache['homepage_minisite']['cache_views_data'] = array('homepage_minisite:block_1', 'homepage_minisite:block_2');
  $display_cache['homepage_top_story']['path'] = '<front>';
  
  // Homepage destination. @todo DEPRECATED, the homepage destination block got absorbed by the new multi-row secondarty touts.
  $display_cache['homepage_destination'] = array();
  $display_cache['homepage_destination']['cache_block'] = array('views:homepage_destination-block_1', 'views:homepage_destination-block_2');
  $display_cache['homepage_destination']['cache_views_data'] = array('homepage_destination:block_1', 'homepage_destination:block_2');
  
  // Clear Memcached (Views).
  if(array_key_exists($flag->name, $display_cache)) {
    $results = array();
    foreach($display_cache[$flag->name] as $bin => $cids) {
      if($bin != 'path' && !cache_is_empty($bin)) {
        foreach($cids as $cid) {
          cache_clear_all($cid, $bin, TRUE);
          $results[] = "flag_name: $flag->name, \$bin: $bin, \$cid: $cid";
        }
      }
      if($bin == 'path') {
        module_load_include('inc', 'advanced_purge', 'advanced_purge.rules');
        advanced_purge_page_clear($cids);
      }
    }
    
    $node = node_load($content_id);
    drupal_set_message("{$node->title}, nid:{$node->nid} has been ". (($action == 'flag') ? 'added to': 'removed from'). " the {$flag->title} channel.");
    watchdog('advanced_purge', 'The following cache items have been purged from persistent cache: @results', array('@results' => print_r($results, TRUE)), WATCHDOG_INFO);

    
    // Varnish purge/expire code.
    if(module_exists('expire') && module_exists('purge')) {
      
      global $base_path;
      $path = $display_cache[$flag->name]['path'];
      $expire = array();
      
      // Special handling for front-page.
      $site_frontpage = variable_get('site_frontpage', 'node');
      if($path == $site_frontpage) {
        //$expire[] = '';
        //$expire[] = 'rss.xml';
        $expire[] = $site_frontpage;
      } else {
        $expire[] = $path;
      }
      
      // Path alias
      $path_alias = url($path, array('absolute' => FALSE));
      // Remove the base path
      $expire[] = substr($path_alias, strlen($base_path));
      
      // Allow other modules to modify the list prior to expiring
      drupal_alter('expire_cache', $expire, $node, $paths);
      
      $expire = array_unique($expire);
      
      // Clear Varnish (anonymous users).
      module_load_include('module', 'expire'); // Required for expire_print_r() in purge.inc line 203.
      module_load_include('inc', 'purge'); // Contains purge_urls(), has Acquia-Varnish purging logic.
      $results = purge_urls($expire);
      purge_logging($results);
      
    }
    
  }
  
}

function advanced_purge_expire_cache_alter(&$expire, &$node, $paths) {
  $test = null;
  
  $key = array_search('<front>', $expire);
  if($key !== FALSE) {
    global $base_root;
    $site_frontpage = variable_get('site_frontpage', 'node');
    
    $expire[$key] = '';
  }
}

/**
 * Purge an array of paths from varnish and memcached.
 * 
 * @param array $expire
 *   Each path must be prepended by a forward slash /. 
 */
function advanced_purge_paths($expire) {
  // Varnish purge.
  if(module_exists('expire') && module_exists('purge')) {
    module_load_include('module', 'expire');
    module_load_include('inc', 'purge');
    
    $results = purge_urls($expire);
    purge_logging($results);
    
    foreach($expire as $path) {
      drupal_set_message(t("The path \"%path\" has been purged from Varnish.",
        array('%path' => $path)
      ));
    }
  }
  
  // Memcached purge.
  global $base_root;
  module_load_include('inc', 'advanced_purge', 'advanced_purge.rules');
  foreach($expire as $path) {
  	//advanced_purge_page_clear($path);
  	$cache = cache_get($path, 'cache_page');
  	if ($cache !== FALSE) {
  	  cache_clear_all($path, 'cache_page');
  	  drupal_set_message(t("The path \"%path\" has been purged from persistent cache.",
  		array('%path' => $path)
  	  ));
  	}  	
  	cache_clear_all($base_root. $path, 'cache_page', TRUE); #$cache = cache_get($base_root . request_uri(), 'cache_page');
  }
}


