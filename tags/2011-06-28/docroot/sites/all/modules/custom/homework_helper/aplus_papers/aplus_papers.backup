<?php

/**
 * @file
 * A multistep form for interactive A+ papers.
 */

/**
 * Implements hook_node_view().
 */
function aplus_papers_node_view($node, $view_mode) {
  if ($node->type == 'a_paper' && $view_mode == 'full') {
    $steps = aplus_papers_prepare_steps($node);
    $node->content['aplus_papers'] = drupal_get_form('aplus_papers_multistep_form', $steps);
  }
}

/**
 * Prepare the steps of the form from a structure of nodes.
 */
function aplus_papers_prepare_steps($node) {
  $steps = array();
  $result = db_query("
    SELECT f.entity_id from field_data_field_step_parent f
    INNER JOIN {node} n ON n.vid = f.revision_id
    WHERE f.field_step_parent_nid = :nid
    AND f.entity_type = 'node'
    AND f.bundle = 'paper_step'
  ", array(':nid' => $node->nid));
  foreach ($result as $record) {
    $nids[] = $record->entity_id;
  }
  if ($nids) {
    $nodes = node_load_multiple($nids);
    usort($nodes, 'aplus_papers_sort_steps');
    foreach ($nodes as $index => $node) {
      $steps[] = aplus_papers_prepare_step($node);
    }
  }
  $steps[] = aplus_paper_review_step($steps);
  return $steps;
}

function aplus_papers_prepare_step($node) {
  $form['description'] = node_view($node, 'full');
  if ($node->field_step_text_area[$node->language][0]['value']) {
    $form['textarea'] = array(
      '#type' => 'textarea',
      '#required' => TRUE,
      '#title' => check_plain($node->title),
    );
  }
  if ($node->field_step_title[$node->language][0]['value']) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => 'Title:',
    );
  }
  if ($node->field_step_name_date[$node->language][0]['value']) {
    $form['name'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => 'Name:',
    );
    $form['date'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => 'Date',
    );
  }
  $form['#checklist'] = $node->title;
  
  return $form;
}

function aplus_papers_sort_steps($a, $b) {
  return ($a->field_step_weight[$a->language][0]['value'] > $b->field_step_weight[$a->language][0]['value']);
}

/**
 * A multistep form, where a different and sequential form
 * is presented on each step of the form.
 *
 * In the AJAX version, the form is replaced for each wizard section. In the
 * multistep version, it causes a new page load.
 *
 * @param $form
 * @param $form_state
 */
function aplus_papers_multistep_form($form, &$form_state, $steps) {
  drupal_add_js(drupal_get_path('module', 'aplus_papers') . '/js/aplus_papers.js', 'file');
  
  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  $form['#prefix'] = '<div id="wizard-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  
  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 0 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;

  $last_step = count($steps) - 1;
  
  $form["checklist"] = array('#markup' => aplus_papers_checklist($steps, $step));

  $form["step_$step"] = $steps[$step];
  if (isset($form["step_$step"]['textarea'])) {
    $form["step_$step"]['textarea']['#default_value'] = empty($form_state['values']["step_$step"]['textarea']) ? '' : $form_state['values']["step_$step"]['textarea'];
  }
  if (isset($form["step_$step"]['title'])) {
    $form["step_$step"]['title']['#default_value'] = empty($form_state['values']["step_$step"]['title']) ? '' : $form_state['values']["step_$step"]['title'];
  }
  if (isset($form["step_$step"]['name'])) {
    $form["step_$step"]['name']['#default_value'] = empty($form_state['values']["step_$step"]['name']) ? '' : $form_state['values']["step_$step"]['name'];
  }
  if (isset($form["step_$step"]['date'])) {
    $form["step_$step"]['date']['#default_value'] = empty($form_state['values']["step_$step"]['date']) ? '' : $form_state['values']["step_$step"]['date'];
  }

  
  if ($step > 0) {
   $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t("Previous step"),

      // Since all info will be discarded, don't validate on 'prev'.
      '#limit_validation_errors' => array(),
      // #submit is required to use #limit_validation_errors
      '#submit' => array('aplus_papers_multistep_form_submit'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'aplus_papers_multistep_form_callback',
      ),
    );
  }
  if ($step < $last_step) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next step'),
      '#ajax' => array(
        'wrapper' => 'wizard-form-wrapper',
        'callback' => 'aplus_papers_multistep_form_callback',
      ),
    );
  }

  if ($step == $last_step) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Submit your information"),
    );
    // Add all previous form fields to last step.
    foreach ($form["step_$step"] as $key => $data) {
      $form_state['#last_step'] = "step_$step";
      if (is_numeric($key)) {
        foreach ($data as $field => $field_data) {
          if ($field == 'textarea' || $field == 'title' || $field == 'name' || $field == 'date') {
          $form["step_$step"][$key][$field]['#default_value'] = $form_state['storage']['values']["step_$key"][$field];
          }  
        }  
      }  
    }  
  }
  return $form;
}

function aplus_papers_multistep_form_callback($form, $form_state) {
  return $form;
}

/**
 * Submit function for aplus_papers_multistep_form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function aplus_papers_multistep_form_submit($form, &$form_state) {
  // Save away the current information.
  $current_step = 'step_' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }
  
  // If coming from review step, pre-populate all fields with that data.
  $last_step = $form_state['#last_step'];
  if ($form_state['input'][$last_step]) {
    foreach ($form_state['input'][$last_step] as $step => $fields) {
      $form_state['storage']['values']["step_$step"] = $fields;
    }  
  }  
  
  // Increment or decrement the step as needed. Recover values if they exist.
  if ($form_state['triggering_element']['#value'] == t('Next step')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
  }
  if ($form_state['triggering_element']['#value'] == t('Previous step')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step_' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }
  
  
  
  // If they're done, submit.
  if ($form_state['triggering_element']['#value'] == t('Submit your information')) {
    $value_message = t('Your information has been submitted:') . ' ';
    foreach ($form_state['storage']['values'] as $step => $values) {
      $value_message .= "$step: ";
      foreach ($values as $key => $value) {
       $value_message .= "$key=$value, ";
      }
    }
    drupal_set_message($value_message);
    $form_state['rebuild'] = FALSE;
    return;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Create a checklist of all steps.
 */
function aplus_papers_checklist($steps, $current) {
  $items = '';
  foreach ($steps as $step => $data) {
    if ($current > $step) {
      $items .= '<li class="checklist-checked">' . $data['#checklist'] . '</li>';
    }
    else {
      $items .= '<li class="checklist-not-checked">' . $data['#checklist']  . '</li>';
    }
  }
  return '<ul>' . $items . '</ul>';
}

/**
 * Prepare final form step.
 */
function aplus_paper_review_step($steps) {
  $form['description'] = array(
    '#markup' => 'Please review your work and make any changes.'
  );
  $form['#checklist'] = 'Review your work';
  
  foreach ($steps as $step) {
    $form[] = $step;
  }
  return $form;
}  
